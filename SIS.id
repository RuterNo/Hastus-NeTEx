basetype date {
	desc "Dates are shown as dd.mm.yyyy, e.g., 17.05.2013"
	mask '!ddmmyyyy|xx.xx.xxxx'
}

basetype time	  		{ mask "0hh'mm:ss" }
definitions MainDefinitions 
	{
	code
	DEFINE m_now_iso8601 { DateToday() + "T" + Format(TimeNow(),"0hh:mm") + ":00" }
	
	DEFINE md_frameVersion { p_JobDate + "-" + Format(p_JobTime, "0hh/mm/ss") }
	DEFINE md_authority { "RUT" }
	DEFINE m_NeTEx_version { "1.04:NO-NeTEx-networktimetable:1.0" }
	DEFINE md_trp_valid CLASS trip
		{
		trp_duration > 0h00 
		}	
	DEFINE md_rte_service_mode CLASS route
		{
		IF rte_service_mode = 0 /* BUS */ THEN
			"bus"
		ELSE IF rte_service_mode = 1 /* TRAMWAY */ THEN
			"tram"
		ELSE IF rte_service_mode = 2 /* METRO */ THEN
			"metro" 
		
		ELSE
			rte_service_mode
		}
	 DEFINE md_itn_pnt_coord
		{
		ConcatMultLine(itn_coord, 2)
		}
	DEFINE md_itn_coord
		{
		Concat(itn_coord) 
		}
	DEFINE m_stops_count
		{
		200 - Count(tpat_stops)
		}
		
	DEFINE m_passing_time
		{
		Get(trip_tp, 1).ttp_passing_time
		}

	
	DEFINE m_trp_is_included CLASS trip { trp_is_for_blk }
	DEFINE m_all_trips 
		{
		GetAll(vehicle_schedule).Get(trip, m_trp_is_included)
		}
	DEFINE m_trips
		{
      GetAll(vehicle_schedule, vsc_is_current).Get(trip, trp_is_in_service AND trp_duration > 0h00 AND trp_is_public)
		}
	DEFINE m_stops_on_trips
		{
		m_trips.Get(stop, stp_is_public)
		}
	DEFINE m_trp_veh_disp_codes CLASS trip 
		{ AppendMult(Object(veh_disp_code, trp_vehicle_display),
		Object(veh_disp_code, trp_veh_disp_code_1),
		Object(veh_disp_code, trp_veh_disp_code_2),
		Object(veh_disp_code, trp_veh_disp_code_3),
		Object(veh_disp_code, trp_veh_disp_code_4),
		Object(veh_disp_code, trp_veh_disp_code_5)) }		
	
	DEFINE m_all_sched_unit_dates CLASS vehicle_schedule
		{
		IF p_DateStart <> null AND p_DateEnd <> null AND p_ProdPhase >= 0 THEN
			SortAsc(GetSchedUnitDates(vehicle_schedule,
					                    p_SchedSet, 
                                   p_SchedUnit, 
                                   p_ProdPhase, 
                                   p_DateStart, 
                                   p_DateEnd, 
                                   p_CalType, 
                                   p_CalendarId), scud_date)
		ELSE
			NULL
		}
	DEFINE m_linefile
		{
		
		trp_route + ".xml"
		}
	DEFINE m_trip_stop_condition CLASS trip_stop
		{
		stp_node_type = 0 AND Prev().tstp_stop_id <> tstp_stop_id AND stp_is_public AND (ttp_is_arrival OR ttp_is_departure)
		}
   DEFINE m_trip_point_condition CLASS trip_point
		{
		trppt_departure_trip_stop.stp_node_type = 0 /*N*/ AND trppt_departure_trip_stop.stp_is_public
		}   
	 DEFINE m_stop_condition CLASS stop
		{
		stp_node_type = 0 /*N*/ AND stp_is_public
		}   	
	DEFINE m_last_in_service_stop CLASS trip_point
		{
                             /* Check that current stop is public and there are 
                                no other public stop left on the route. */
      stp_is_public AND Next(stp_is_public) = NULL
		//Next().tstp_stop_id = 301291191 OR Next().tstp_stop_id = 301291251		
		}
	DEFINE m_first_in_service_stop CLASS trip_point
		{
                             /* Check that current stop is public and there are 
                                no other public stop before on the route. */
      stp_is_public AND Prev(stp_is_public) = NULL
      }
   DEFINE m_show_arrival CLASS trip_point
      {
      IF m_last_in_service_stop THEN
         TRUE
      ELSE IF m_first_in_service_stop THEN
         FALSE
      ELSE
         trppt_load_time > 0m OR Get(trip_stop, 1).tstp_pass_flow_rest = 2 /* Debarking only */
      }
   DEFINE m_show_departure CLASS trip_point
      {
      IF m_first_in_service_stop THEN
         TRUE
      ELSE IF m_last_in_service_stop THEN
         FALSE
      ELSE 
       trppt_load_time > 0m OR Get(trip_stop, 1).tstp_pass_flow_rest IN [0, 1] /* No restriction or Boarding only */
      }
	
                             /*--- Specific information ---*/
      DEFINE md_vsc_day_type_from CLASS vehicle_schedule
         { /* Used for looping up to 7 times on the same vehicle_schedule. */
         AppendMult(GetCurrent(vehicle_schedule), GetCurrent(vehicle_schedule),
                    GetCurrent(vehicle_schedule), GetCurrent(vehicle_schedule),
                    GetCurrent(vehicle_schedule), GetCurrent(vehicle_schedule),
                    GetCurrent(vehicle_schedule)) }                             
      DEFINE md_calendar_op_day_post CLASS scheduling_unit_date {
                             /* When a single day schedule type is used we return
                                the day type of the schedule type, otherwise we
                                return the day type of the date. */
         IF scud_vehicle_sched.vsc_sched_type IN [6,13,14,11,3,4,5] /* Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday */ THEN
            md_date_vsc_type_day
         ELSE
            md_calendar_op_day
         }
      DEFINE md_calendar_op_day CLASS scheduling_unit_date {
         scud_day       
         }
      DEFINE md_date_vsc_type_day CLASS scheduling_unit_date {
                             /* For performance reason the schedule type are not
                                in order of day. */
         IF scud_vehicle_sched.vsc_sched_type = 6 /* Sunday */ THEN
            "0"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 5 /* Saturday */ THEN
            "6"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 4 /* Friday */ THEN
            "5"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 3 /* Thursday */ THEN
            "4"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 11 /* Wednesday */ THEN
            "3"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 13 /* Monday */ THEN
            "1"
         ELSE /* Tuesday */
            "2"
         }
		DEFINE m_VehicleType {
			"X"
		}
		DEFINE m_stop_type {
			IF stp_node_type = "M" THEN	
				"2"
			ELSE IF stp_node_type ="V" THEN
				"10"
			ELSE "4" 
		}
		
	end
	} # definitions MainDefinitions 

file tur
	{
	name '"tur.twi"'
	line header
		{
			item LineNr { value '"LineNr"' }
			item TripNr { value '"TripNr"' }
			item TripIndex { value '"TripIndex"' }
			item DepartureTime { value '"DepartureTime"' }
			item Operator { value '"Operator"' }
			item Direction { value '"Direction"' }
			item RunNr { value '"RunNr"' } 
			item VehicleType { value '"VehicleType"' }
			item DrivingDates { value '"DrivingDates"' }
			item LineName { value '"LineName"' }
			item LineGroup { value '"LineGroup"' }
			item TripType { value '"TripType"' }
			item Post { value '"Post"' }
			item VariantNr { value '"VariantNr"' }
			item DTG { value '"DTG"' }
			item DTG2 { value '"DTG2"' }
		} # line header
	foreach trip
		{
		
		line trip
			{
				item LineNr { value 'trim(trp_route)' }
				item TripNr { value 'trim(trp_number)' }
				item TripIndex { value '"0"' }
				item DepartureTime { value 'Format(trp_time_start, "0hh~/mm/ss|xx:xx:xx")' }
				item Operator { value 'trp_contractor' }
				item Direction { value 'trp_direction' }
				item RunNr { value 'trim(trp_block)' }
				item VehicleType { value 'm_VehicleType' }
				item DrivingDates { value 'trp_blkng_day_binary' } # må skrives om til å dekke hele gyldighetsperioden, ikke bare én uke.
				item LineName { value '""' }
				item LineGroup { value '""' }
				item TripType { value '""' }
				item Post { value '""' }
				item VariantNr { value 'trp_pattern' }
				item DTG { value 'trp_run_time_pattern.rpat_identifier' }
				item DTG2 { value 'trp_run_time_pattern.rpat_external_id' }
			} # line trip
		} # foreach trip
	} # file tur
file period
	{
	name '"period.twi"'
	line header
		{
		item StartingDate { value '"StartingDate"' }
		item EndDate { value '"EndDate"' }
		item DateOfExport { value '"DateOfExport"' }
		item TimeOfExport { value '"TimeOfExport"' }
		}
	line period
		{
		item StartingDate { value 'p_DateStart' }
		item EndDate { value 'p_DateEnd' }
		item DateOfExport { value 'p_JobDate' }
		item TimeOfExport { value 'Format(p_JobTime, "0hh~/mm/ss|xx:xx:xx")' }
		}
	}
file vardrive
	{
	name '"vardrive.twi"'
	line header
		{
		item LineNr { value '"LineNr"' }
		item VariantNr { value '"VariantNr"' }
		item VariantName { value '"VariantName"' }
		item SequenceNr { value '"SequenceNr"' }
		item StopNr { value '"StopNr"' }
		item StopPosNr { value '"StopPosNr"' }
		item Distance { value '"Distance"' }
		item DestCode { value '"DestCode"' }
		item MessageCode { value '"MessageCode"' }
		item RegulationStop { value '"RegulationStop"' }
		item DrivingTime { value '"DrivingTime"' }
		item WaitingTime { value '"WaitingTime"' }
		}
	foreach trip
		{
		unique_on 'trp_route, trp_pattern'
		sort_by TripSort
			{
			criteria trp_route
			criteria trp_pattern
			}
		foreach trip_point
			{
			sort_by TripPointSort
				{
				criteria trppt_position
				}
			line vardrive
				{
				item LineNr { value 'trim(trp_route)' }
				item VariantNr { value 'trim(trp_pattern AS str10_t)' }
				item VariantName { value 'trim(trp_pattern AS str10_t)' }
				item SequenceNr { value 'trim(trppt_position AS str10_t)' }
				item StopNr { value 'trim((stp_id_regtopp_calc AS int4_t) as str10_t)' }
				item StopPosNr { value 'trim((stp_pole_number AS int2_t) as str10_t)' }
				item Distance { value 'trppt_distance' }
				item DestCode { value 'trp_vehicle_display' }
				item MessageCode { value '"Msgcode"' }
				item RegulationStop { value '"1"' } # all stops are reg stops
				item DrivingTime { value 'trim((tstp_delta_time as int4_t) as str10_t)' }
				item WaitingTime { value 'IF trppt_load_time = NULL THEN "0" ELSE trim((trppt_load_time as int4_t) as str10_t)' }
				}
			} # foreach trip_point
		
		} # foreach trip_pattern
	}
file hpl
	{
	name '"hpl.twi"'
	line header
		{
		item StopNr {value '"StopNr"'}
		item StopName {value '"StopName"'}
		item ShortName {value '"ShortName"'}
		item TimeTableName {value '"TimeTableName"'}
		item BusposName {value '"BusposName"'}
		item MonitorName {value '"MonitorName"' }
		item StopType {value '"StopType"'}
		item FareZoneNr {value '"FareZoneNr"'}
		item NrOfPositions {value '"NrOfPositions"'} 
		item SpeechCode {value '"SpeechCode"'}
		item Extra1-CrossingNr {value '"Extra1-CrossingNr"'} 
		item Extra2-TypeOfSP {value '"Extra2-TypeOfSP"'}
		item Extra3-MetersBeforeSPAct {value '"Extra3-MetersBeforeSPAct"'}
		item NextSpeechChannel {value '"NextSpeechChannel"'}
		item NextDataChannel {value '"NextDataChannel"'}
		item TransferInfo {value '"TransferInfo"'}
		item InterchangeOptionsText {value '"InterchangeOptionsText"'}
		item StopNsmeEN {value '"StopNsmeEN"'}
		item AdditionalText {value '"AdditionalText"'}
		item AdditionalTextEN {value '"AdditionalTextEN"'}
		item PointOfInterest {value '"PointOfInterest"'}
		item PIDVisioViewC {value '"PIDVisioViewC"'}
		}
	foreach stop
		{
		unique_on stp_id_regtopp_calc
		line stop
			{
			item StopNr { value 'stp_id_regtopp_calc' }
			item StopName {value 'stp_description'}
			item ShortName {value 'stp_short_name'}
			item TimeTableName {value 'stp_alternate_name'}
			item BusposName {value '""'} # ignored
			item MonitorName {value '""'} # ignored
			item StopType {value 'm_stop_type'}
			item FareZoneNr {value 'stp_zone.zon_description'} # ignored? Sjekk dette
			item NrOfPositions {value '""'} # not ignored!
			item SpeechCode {value 'stp_id_regtopp_calc'}
			item Extra1-CrossingNr {value '""'} # ignored
			item Extra2-TypeOfSP {value '""'} # ignored
			item Extra3-MetersBeforeSPAct {value '""'} # ignored
			item NextSpeechChannel {value '""'} # ignored
			item NextDataChannel {value '""'} # ignored
			item TransferInfo {value 'var_identifier'} # korresponderende linjer (til PIDVisio)
			item InterchangeOptionsText {value '""'} # ignored
			item StopNsmeEN {value '""'} # ignored
			item AdditionalText {value '""'} # ignored
			item AdditionalTextEN {value '""'} 
			item PointOfInterest {value '"0"'}
			item PIDVisioViewC {value '"0"'}
			} # line stop
		} # foreach stop
	}
file hpllage
	{
	name '"hpllage.twi"'
	line header
		{
		item StopNr {value '"StopNr"'}
		item StopPosName {value '"StopPosName"'}
		item X-Position {value '"X-Position"'}
		item Y-Position {value '"Y-Position"'}
		item HasRealTimeSign {value '"HasRealTimeSign"'}
		item StopPosNr {value '"StopPosNr"'}
		item SizeOfBay {value '"SizeOfBay"'}
		item SOBBeforeMast {value '"SOBBeforeMast"'}
		} # line header
	foreach stop
		{
		line hpllage
			{
				item StopNr {value 'stp_identifier'}
				item StopPosName {value 'stp_point_indication'} # replace with the new field when in place
				item X-Position {value 'loca_x_coord'}
				item Y-Position {value 'loca_y_coord'}
				item HasRealTimeSign {value 'IF stp_equipment_1 = TRUE then "1" ELSE "0"'}
				item StopPosNr {value 'stp_pole_number AS int2_t'}
				item SizeOfBay {value '""'}
				item SOBBeforeMast {value '""'}
			} # line hpllage
		} # foreach stop
	}
file linjetal
	{
	name '"linjetal.twi"'
	line header
		{
		item LineNr {value '"LineNr"'}
		item Talkod {value '"Talkod"'}
		} #line header
	foreach route
		{
		line linjetal
			{
				item LineNr {value 'rte_identifier'}
				item Talkod {value '""'}
			} # line linjetal
		} # foreach line
	}
file samtraf
	{
	name '"samtraf.twi"'
	}
file destkod
	{
	name '"destkod.twi"'
	line header
		{
		item DestCode {value '"DestCode"'}
		item IBIS-DestNr {value '"IBIS-DestNr"'}
		item Mobitec-ZEDIT-DestNr {value '"Mobitec-ZEDIT-DestNr"'}
		item Talkod {value '"Talkod"'}
		item Name {value '"Name"'}
		item LAWO-NameRow1 {value '"LAWO-NameRow1"'}
		item LAWO-NameRow2 {value '"LAWO-NameRow2"'}
		} # line header
	foreach veh_disp_code
		{
		unique_on ' vdc_id '
		 sort_by VDCSort
		   {
		   criteria vdc_id
		   }
		line destkod
			{
			item DestCode {value 'vdc_id'}
			item IBIS-DestNr {value 'vdc_id'}
			item Mobitec-ZEDIT-DestNr {value 'vdc_id'}
			item Talkod {value '""'}
			item Name {value 'vdc_message1'}
			item LAWO-NameRow1 {value '""'}
			item LAWO-NameRow2 {value '""'}
			} # line destkod
		} # foreach vehicle_display_code
	}
file medkod
	{
	name '"medkod.twi"'
	}
file omlopp
	{
	name '"omlopp.twi"'
	line header
		{
		item RunNr {value '"RunNr"'}
		item StartDepot {value '"StartDepot"'}
		item EndDepot {value '"EndDepot"'}
		item PullOutTime {value '"PullOutTime"'}
		item PullInTime {value '"PullInTime"'}
		item Operator {value '"Operator"'}
		item DrivingDates {value '"DrivingDates"'}
		} # line header
	foreach block
		{
		line block
			{
			item RunNr {value 'blk_number'}
			item StartDepot {value 'blk_stop_first.stp_id_regtopp_calc'}
			item EndDepot {value 'blk_stop_last.stp_id_regtopp_calc'}
			item PullOutTime {value 'Format(blk_time_start, "0hh~/mm/ss|xx:xx:xx")'}
			item PullInTime {value 'Format(blk_time_end, "0hh~/mm/ss|xx:xx:xx")'}
			item Operator {value 'blk_garage.gar_contractor.cntr_description'}
			item DrivingDates {value 'blk_operating_days'}
			} # line block
		} # foreach block
	}
