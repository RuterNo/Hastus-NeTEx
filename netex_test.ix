basetype date {
	desc "Dates are shown as yyyy-mm-dd, e.g., 2013-05-17"
	mask '!yyyymmdd|xxxx-xx-xx'
}

basetype time	  		{ mask "0hh'mm:ss" }	

		
definitions MainDefinitions 
	{
	code
	DEFINE m_now_iso8601 { DateToday() + "T" + Format(TimeNow(),"hh:mm:ss") }
	
	DEFINE md_frameVersion { v_source + "_" + Format(datetoday(),"!yyyymmdd") }
	DEFINE md_authority { "RUT" }
	DEFINE m_NeTEx_version { "1.04:NO-NeTEx-networktimetable:1.0" }
	DEFINE md_trp_valid CLASS trip
		{
		trp_duration > 0h00 
		}	
	DEFINE md_rte_service_mode CLASS route
		{
		IF rte_service_mode = 0 /* BUS */ THEN
			"bus"
		ELSE IF rte_service_mode = 1 /* TRAMWAY */ THEN
			"tram"
		ELSE IF rte_service_mode = 2 /* METRO */ THEN
			"metro" 
		
		ELSE
			rte_service_mode
		}
	 DEFINE md_itn_pnt_coord
		{
		ConcatMultLine(md_itn_coord, 5)
		}
	DEFINE md_itn_coord
		{
		AppendMult(Format(itn_coord_lat, "nn.nnnnn"), " ", Format(itn_coord_long, "nn.nnnnn"))
		}
	DEFINE m_stops_count
		{
		200 - Count(tpat_stops)
		}
		
	DEFINE m_passing_time
		{
		Get(trip_tp, 1).ttp_passing_time
		}

	
	DEFINE m_trp_is_included CLASS trip { trp_is_for_blk }
	DEFINE m_all_trips 
		{
		GetAll(vehicle_schedule).Get(trip, m_trp_is_included)
		}
	DEFINE m_trp_veh_disp_codes	CLASS trip 
		{ AppendMult(Object(veh_disp_code, trp_vehicle_display),
		Object(veh_disp_code, trp_veh_disp_code_1),
		Object(veh_disp_code, trp_veh_disp_code_2),
		Object(veh_disp_code, trp_veh_disp_code_3),
		Object(veh_disp_code, trp_veh_disp_code_4),
		Object(veh_disp_code, trp_veh_disp_code_5)) }
		
	DEFINE m_all_sched_unit_dates
		{
		IF p_DateStart <> null AND p_DateEnd <> null AND p_ProdPhase >=0 THEN
			SortAsc(GetSchedUnitDates(vehicle_schedule,
					p_SchedSet, p_SchedUnit, p_ProdPhase, p_DateStart, p_DateEnd, p_CalType, p_CalendarId), scud_date)
		ELSE
			null
		}
	
	end
	} # definitions MainDefinitions 

var v_source							{ type 'string'  assign 'IF p_CalendarId<>NULL THEN p_CalendarId ELSE IF p_SchedUnit<>NULL THEN p_SchedUnit '}
var v_tpat_link_index 					{ type 'integer' assign '0' }
var v_trp_link_index 					{ type 'integer' assign '0' }
var v_valid_days						{ type 'string' } 
var v_time_component_000000 { type 'string' assign '"T00:00:00"' }
var v_time_component_235959 { type 'string' assign '"T23:59:59"' }
var v_vdc1 { type 'string' }
var v_vdc2 { type 'string'  }
var v_vdc3 { type 'string' }
var v_vdc4 { type 'string'  }
var v_vdc5 { type 'string'  }
var v_vdc1_stop { type 'string'  }
var v_vdc2_stop { type 'string'  }
var v_vdc3_stop { type 'string' }
var v_vdc4_stop { type 'string' }
var v_vdc5_stop { type 'string' }

parameter p_InclItineraryCoordinates {
	title 'Inkluder koordinater for timing links'
	desc 'Om Itinerary-koordinater skal være med.'
	type boolean
	def_value 'FALSE'
}
parameter p_InclSiteFrame {
	title 'Inkluder SiteFrame (med fullstendige StopPlace-definisjoner'
	desc 'Om SiteFrame skal være med.'
	type boolean
	def_value 'FALSE'
}
parameter p_InclServiceCalendarFrame {
	title 'Inkluder ServiceCalendarFrame (eksperimentell)'
	desc 'Om ServiceFrame skal være med.'
	type boolean
	def_value 'FALSE'
}

file common 
	{ name ' "_common.xml" ' }
	{
	xmlelement PublicationDelivery 
		{
		xmlattribute xmlns { value '"http://www.netex.org.uk/netex"' }
		xmlattribute xmlns:gml { value '"http://www.opengis.net/gml/3.2"' }
		xmlattribute version { value 'm_NeTEx_version' }
		
		xmlelement PublicationTimestamp { value 'm_now_iso8601'  }
		xmlelement ParticipantRef { value '"md_authority"' }
		
		xmlelement dataObjects
			{
			
			xmlelement CompositeFrame 
				{				
				xmlattribute id 					{ value 'md_authority + ":CompositeFrame:1"' }
				xmlattribute version 				{ value 'md_frameVersion' }
				xmlattribute modification 			{ value '"new"' }
				
				xmlelement FrameDefaults 
					{
					xmlelement DefaultDataSourceRef 
						{
						xmlattribute ref 			{ value 'md_authority + ":DataSource:" + md_authority' }
						} # xmlelement DefaultDataSourceRef 
						xmlelement DefaultLocale
						{
						xmlelement TimeZone				{value ' "CET" ' }
						} #xmlelement DefaultLocale
					} # xmlelement FrameDefaults
				xmlelement versions
					{
					xmlelement Version 
						{
						xmlattribute id 				{ value 'md_authority + ":Version:" + md_frameVersion' }
						xmlattribute version 			{ value 'md_frameVersion' }
						xmlelement StartDate 			{ value 'p_DateStart + v_time_component_000000' }
						xmlelement EndDate 				{ value 'p_DateEnd + v_time_component_235959' }						
						} # xmlelement Version 
					} # xmlelement versions
				xmlelement frames
					{
					xmlelement ResourceFrame 
						{
						xmlattribute id 				{ value 'md_authority + ":ResourceFrame:1"' }
						xmlattribute version 			{ value 'md_frameVersion' }
						xmlelement dataSources
							{
							xmlelement DataSource 
								{
								xmlattribute id 				{ value 'md_authority + ":1"' }
								xmlattribute version 			{ value 'md_frameVersion' }
								xmlelement Name 				{ value '"Hastus-Ruter"' }
								xmlelement Description			{ value '"Hastus 2013 by GIRO"' }
								xmlelement Email				{ value '"support@ruter.no"' }
								} # xmlelement DataSource 
							} # xmlelement dataSources
						 
						xmlelement organisations
							{						
							foreach Contractor
								{
								unique_on 'cntr_identifier'
								xmlelement Operator
									{
									xmlattribute id 					{ value 'md_authority + ":Operator:" + cntr_identifier' }
									xmlattribute version 				{ value 'md_frameVersion' }	
									xmlelement Name 					{ value 'cntr_description' }
									} # xmlelement Operator
								} # foreach Contractor
							
							xmlelement Authority
								{
								xmlattribute id 				{ value 'md_authority + ":Authority:" + md_authority' }
								xmlattribute version 			{ value 'md_frameVersion' }
								xmlelement Name 				{ value 'md_authority' }
								} # xmlelement Authority
								
							} # xmlelement organisations					
						} # xmlelement ResourceFrame	
					
					xmlelement ServiceCalendarFrame
						{
						condition ' p_InclServiceCalendarFrame '
						xmlattribute id 				{ value 'md_authority + ":1"' }
						xmlattribute version 			{ value 'md_frameVersion' }
						xmlelement operatingDays
							{
							foreach booking_calendar_date
								{
								from ' m_all_sched_unit_dates.scud_calendar_date '
								sort_by ' bcald_date '
								
								foreach scheduling_unit_date
									{
									from ' m_all_sched_unit_dates '
									condition ' scud_date = bcald_date '
									foreach service_context
										{
										unique_on ' sctx_internal_no, bcald_date '
										xmlelement OperatingDay
											{
											xmlattribute version 			{ value 'md_frameVersion' }
											xmlattribute id					{ value ' md_authority + ":" + bcald_date + ":" + sctx_internal_no ' }
											xmlelement CalendarDate			{ value ' bcald_date ' }
											} # xmlelement OperatingDay
										} # foreach service_context
									} # foreach scheduling_unit_date
								
								}	# foreach booking_calendar_date
							} # xmlelement operatingDays
						} # xmlelement ServiceCalendarFrame
					} # xmlelement frames
				} # xmlelement CompositeFrame 
			} # xmlelement dataObjects
		} # xmlelement PublicationDelivery
	} # file netex



file linex { name ' "linex.xml" '}
	{
	
	xmlelement PublicationDelivery 
		{
		xmlattribute xmlns { value '"http://www.netex.org.uk/netex"' }
		xmlattribute xmlns:gml { value '"http://www.opengis.net/gml/3.2"' }
		xmlattribute version { value 'm_NeTEx_version' }
		
		xmlelement PublicationTimestamp { value 'm_now_iso8601' }
		xmlelement ParticipantRef { value '"NDOV"' }
		
		xmlelement dataObjects
			{
			xmlelement CompositeFrame 
				{				
				xmlattribute id 					{ value 'md_authority + ":CompositeFrame:1"' }
				xmlattribute version 				{ value 'md_frameVersion' }
				xmlattribute modification 			{ value '"new"' }
				
				xmlelement FrameDefaults 
					{
					xmlelement DefaultDataSourceRef 
						{
						xmlattribute ref 			{ value 'md_authority + ":DataSource:" + md_authority' }
						} # xmlelement DefaultDataSourceRef 
					} # xmlelement FrameDefaults
				xmlelement versions
					{
					xmlelement Version 
						{
						xmlattribute id 				{ value 'md_authority + ":Version:" + md_frameVersion' }
						xmlattribute version 			{ value 'md_frameVersion' }
						xmlelement StartDate 			{ value 'p_DateStart + v_time_component_000000' }
						xmlelement EndDate 				{ value 'p_DateEnd + v_time_component_235959' }							
						} # xmlelement Version 
					} # xmlelement versions
				xmlelement frames
					{
					xmlelement SiteFrame
                        {
						condition ' p_InclSiteFrame '
                        xmlelement stopPlaces
                            {
                            foreach trip_point
                                {
                                from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_point)'
                                condition ' stp_is_public '
                                unique_on 'stp_id_regtopp_calc'
                                xmlelement StopPlace
                                    {
                                    xmlattribute id                 { value 'md_authority + ":sp:" + stp_id_regtopp_calc' }
                                    xmlattribute version             { value 'md_frameVersion' }
                                    xmlelement Name    { value 'stp_alternate_name' }
                                    # xmlelement TransportMode { value '"funicular"' }
                                    xmlelement StopPlaceType { value ' stp_node_type ' }
                                    } #xmlelement StopPlace
                                } # foreach trip_point
                            } # xmlelement stopPlaces
						} # xmlelement SiteFrame
                        
                    

					xmlelement ServiceFrame
						{
						xmlattribute id 			{ value 'md_authority + ":ServiceFrame:1"' }
						xmlattribute version 		{ value 'md_frameVersion' }

						xmlelement directions
							{
							xmlelement Direction
								{
								xmlattribute id			{value 'md_authority + ":Direction:1"'}
								xmlattribute version 	{ value 'md_frameVersion' }
								xmlelement Name			{value '"1"'}
								xmlelement Description	{value '"Eastbound for city lines, for regional lines inbound to Oslo"'}
								}
							xmlelement Direction
								{
								xmlattribute id			{value 'md_authority + ":Direction:2"'}
								xmlattribute version 	{ value 'md_frameVersion' }
								xmlelement Name			{value '"2"'}
								xmlelement Description	{value '"Westbound for city lines, for regional lines outbound from Oslo"'}
								}
							} # xmlelement directions
						xmlelement routes
							{
							foreach trip
								{
								from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1).Get(trip, md_trp_valid)'
								unique_on 'trp_route,trp_pattern'
								condition 'md_trp_valid AND trp_is_in_service AND m_trp_is_included'
								sort_by TripSort
									{
									criteria trp_route
									criteria trp_pattern
									} # sort_by TripSort
														
								var v_tpat_link_index 		{assign '0'}	
								xmlelement Route
									{
									xmlattribute id 				{ value 'md_authority + ":Route:" + trim(trp_route) + "-" + tpat_external_id' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement Name 				{ value 'Get(stop, 1).stp_alternate_name + "-" + Get(stop, "*").stp_alternate_name' }
									xmlelement LineRef
										{
										xmlattribute version 		{ value 'md_frameVersion' }
										xmlattribute ref 			{ value 'md_authority + ":Line:" + trim(rte_identifier)' }
										} # xmlelement LineRef
									xmlelement DirectionRef
										{
										xmlattribute version 		{ value 'md_frameVersion' }
										xmlattribute ref 			{ value 'md_authority + ":Direction:" + Format(tpat_direction, "n")' }
										} # xmlelement
									
									xmlelement pointsInSequence
										{
										foreach trip_stop
											{												
											condition 'stp_identifier <> "" AND stp_node_type = 0 AND Prev().tstp_stop_id <> tstp_stop_id'
											var v_tpat_link_index 		{assign ' v_tpat_link_index + 1 '}
																			
											xmlelement PointOnRoute
												{
												xmlattribute id 			{ value 'md_authority + ":PointOnRoute:" + trim(tpat_route) + "-" + tpat_external_id + "-" + v_tpat_link_index' }
												xmlattribute version 		{ value 'md_frameVersion' }
												xmlelement RoutePointRef
													{
													xmlattribute ref { value 'md_authority + ":RoutePoint:" + stp_identifier ' }
													} # xmlelement RoutePointRef							
												} # xmlelement PointOnRoute
											} # foreach trip_pattern_point
										} # xmlelement pointsInSequence
									} # xmlelement Route
								} # foreach trip_pattern
							} # xmlelement routes
						xmlelement lines
							{
							foreach trip
								{
								from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1).Get(trip, md_trp_valid)'
								condition 'trp_is_public'
								unique_on 'trp_route'
								sort_by 'trp_route'
								xmlelement Line
									{
									xmlattribute id 			{ value 'md_authority + ":Line:" + trim(trp_route)' }
									xmlattribute version 		{ value 'md_frameVersion' }
									
									xmlelement Name 				{ value 'Object(route,trp_route).rte_description' }
									xmlelement TransportMode 		{ value 'md_rte_service_mode' }
									xmlelement PublicCode 			{ value 'trim(Object(route,trp_route).rte_pub_id)' }
									xmlelement OperatorRef
										{
										xmlattribute ref 			{ value 'md_authority+":Operator:"+ Object(route,trp_route).rte_oper_company' }
										} # xmlelement AuthorityRef
									xmlelement Monitored 			{ value 'IF trp_is_in_service THEN "true" ELSE "false"' }
									#xmlelement AccessibilityAssessment
									#	{
									#	xmlattribute id 			{ value 'md_authority + ":AccessibilityAssessment:" + trim(trp_route)' }
									#	xmlattribute version 		{ value 'md_frameVersion' }
									#	} # xmlelement AccessibilityAssessment
									} # xmlelement Line														
								} # foreach trip
							} # xmlelement lines
						xmlelement destinationDisplays
							{
							foreach veh_disp_code
								{
								from ' Different(m_all_trips.m_trp_veh_disp_codes) '
								unique_on ' vdc_id '
								sort_by ' vdc_id '
								
								xmlelement DestinationDisplay
									{
									xmlattribute id 				{ value 'md_authority + ":DestinationDisplay:" + vdc_id' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement Name 				{ value 'vdc_message1' }
									
									} # xmlelement DestinationDisplay					
								} # foreach veh_disp_code
							} # xmlelement destinationDisplays
						xmlelement scheduledStopPoints
							{
							foreach stop
								{
								from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
								unique_on 'stp_identifier'
								condition 'stp_is_public'
								sort_by 'stp_identifier'
								xmlelement ScheduledStopPoint
									{
									xmlattribute id 				{ value 'md_authority + ":StopPoint:" + stp_identifier' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement Name 				{ value 'stp_alternate_name' } # User def attribute (Regtopp)
									# xmlelement ForAlighting 		{ value 'IF stp_allow_debarking THEN "true" ELSE "false"' }
									# xmlelement ForBoarding 			{ value 'IF stp_allow_boarding THEN "true" ELSE "false"' }
									
									} # xmlelement ScheduledStopPoint
								} # foreach stop
							} # xmlelement scheduledStopPoints
						
						xmlelement stopAssignments
							{
							foreach stop
								{
								from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
								unique_on 'stp_identifier'
								condition 'stp_is_public'
								sort_by 'stp_identifier'
								xmlelement PassengerStopAssignment
									{
									xmlattribute id 				{ value 'md_authority + ":PassengerStopAssignment:" + stp_identifier' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement ScheduledStopPointRef
										{
										xmlattribute ref 			{ value 'md_authority + ":StopPoint:" + stp_identifier' }
										}
									xmlelement StopPlaceRef
										{
										xmlattribute ref			{ value 'md_authority + ":sp:" + stp_id_regtopp_calc' }
										}
									xmlelement QuayRef	
										{
										xmlattribute ref			{ value 'md_authority + ":sp:" + stp_id_regtopp_calc + ":q:" + stp_pole_number' }
										}
									} # xmlelement PassengerStopAssignment
								} # foreach stop
							} # xmlelement stopAssignments
						
									
						xmlelement timingLinks
							{
							foreach trip_pattern_point
								{
								from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_pattern).get(trip_pattern_point)'
								condition 'Prev().stp_identifier <> "" AND stp_identifier <> "" AND Prev().stp_identifier <> stp_identifier'
								unique_on 'Prev().stp_identifier, stp_identifier '
								sort_by TripPatternStopSort
									{
									criteria Prev().stp_identifier
									criteria stp_identifier
									criteria tpatpt_distance
									} # sort_by TripPatternStopSort
								xmlelement TimingLink
									{
									xmlattribute id 						{ value 'md_authority + ":TimingLink:" + Prev().stp_identifier + "-" + stp_identifier' }
									xmlattribute version 					{ value 'md_frameVersion' }
									xmlelement Distance 					{ value 'Trim(Format(tpatpt_distance,"zzzzz.n"))' }
									xmlelement FromPointRef
										{ 
										xmlattribute ref 		{ value 'md_authority + ":StopPoint:" + Prev().stp_identifier' }
										} # xmlelement FromPointRef
									xmlelement ToPointRef
										{
										xmlattribute ref 		{ value 'md_authority + ":StopPoint:" + stp_identifier' }
										} # xmlelement ToPointRef
									xmlelement gml:LineString
										{
										condition ' p_InclItineraryCoordinates '
										xmlattribute srsName { value ' "4326" ' }
										xmlelement gml:coordinates { value 'md_itn_pnt_coord' } 
												
											
										} # xmlelement gml:LineString
									} # xmlelement TimingLink
								} # foreach trip_pattern_point
							} # xmlelement timingLinks

						xmlelement journeyPatterns
							{
							foreach trip
								{
								from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1).Get(trip, md_trp_valid)'
								unique_on 'trp_route,trp_pattern'
								condition 'md_trp_valid AND trp_is_in_service AND m_trp_is_included'
								sort_by TripSort
									{
									criteria trp_route
									criteria trp_pattern
									} # sort_by TripSort
								
								var v_tpat_link_index {assign '0'}	
								var v_vdc1 { assign trp_veh_disp_code_1 }
								var v_vdc2 { assign trp_veh_disp_code_2 }
								var v_vdc3 { assign trp_veh_disp_code_3 }
								var v_vdc4 { assign trp_veh_disp_code_4 }
								var v_vdc5 { assign trp_veh_disp_code_5 }
								var v_vdc1_stop { assign trp_stop_id_1 }
								var v_vdc2_stop { assign trp_stop_id_2 }
								var v_vdc3_stop { assign trp_stop_id_3 }
								var v_vdc4_stop { assign trp_stop_id_4 }
								var v_vdc5_stop { assign trp_stop_id_5 }
								
								xmlelement ServiceJourneyPattern
									{
									xmlattribute id 			{ value 'md_authority + ":JourneyPattern:" + trim(trp_route) + "-" + trp_pattern' }
									xmlattribute version 		{ value 'md_frameVersion' }
									xmlelement RouteRef
										{
										xmlattribute ref		{ value 'md_authority + ":Route:" + trim(trp_route) +  "-" + trp_pattern'}
										} # xmlelement RouteRef
									xmlelement pointsInSequence
										{
										foreach trip_stop
											{												
											condition 'stp_identifier <> "" AND stp_node_type = 0 AND Prev().tstp_stop_id <> tstp_stop_id '
											var v_tpat_link_index 		{assign ' v_tpat_link_index + 1 '}
											xmlelement StopPointInJourneyPattern
												{
												xmlattribute id 			{ value 'md_authority + ":StopPointInJourneyPattern:" + trim(trp_route) + "-" + trp_pattern + "-" + v_tpat_link_index' }												
												xmlattribute version 		{ value 'md_frameVersion' }
												xmlattribute order 			{ value 'v_tpat_link_index' }	
												xmlelement ScheduledStopPointRef
													{
													xmlattribute ref 		{ value 'md_authority + ":StopPoint:" + stp_identifier' }
													} # xmlelement ScheduledStopPointRef
												xmlelement ForAlighting
													{
													condition 'NOT Get(trip_tp, 1).ttp_is_arrival'
													value ' "false" '
													} # xmlelement forAlighting
												xmlelement ForBoarding
													{
													condition 'NOT Get(trip_tp, 1).ttp_is_departure AND Next().tstp_stop_id <> tstp_stop_id '
													value ' "false" '
													} # xmlelement forBoarding
												
												
												xmlelement DestinationDisplayRef
													{
													condition 'stp_identifier = v_vdc1_stop'
													xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc1' }
													} # xmlelement DestinationDisplayRef	
												
												xmlelement DestinationDisplayRef
													{
													condition 'stp_identifier = v_vdc2_stop'
													xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc2' }
													} # xmlelement DestinationDisplayRef	
												
												xmlelement DestinationDisplayRef
													{
													condition 'stp_identifier = v_vdc3_stop'
													xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc3' }
													} # xmlelement DestinationDisplayRef	
												
												xmlelement DestinationDisplayRef
													{
													condition 'stp_identifier = v_vdc4_stop'
													xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc4' }
													} # xmlelement DestinationDisplayRef	
												
												xmlelement DestinationDisplayRef
													{
													condition 'stp_identifier = v_vdc5_stop'
													xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc5' }
													} # xmlelement DestinationDisplayRef	
												} # xmlelement StopPointInJourneyPattern								
											} # foreach trip_pattern_point						
										} # xmlelement pointsInSequence
									} # xmlelement ServiceJourneyPattern
								} # foreach trip_pattern
							} # xmlelement journeyPatterns
						#xmlelement notices
						#	{
						#	xmlelement journeyInterchange
						#		{
						#		foreach trip_meet
						#			{
						#			from 'GetAll(vehicle_schedule, vsc_is_current).Get(meet_builder).Get(trip_meet)'
						#			xmlelement ServiceJourneyInterchange
						#				{
						#				xmlattribute ref 					{ value 'md_authority + ":ScheduledStopPoint:" + stp_identifier' }
						#				xmlattribute version				{ value 'md_frameVersion' }
						#				xmlelement Guaranteed 				{ value 'IF meet_public THEN "true" ELSE "false"' }
						#				xmlelement Advertised 				{ value 'IF meet_driver THEN "true" ELSE "false"' }
						#				xmlelement MaximumWaitTime 			{ value '"PT" + Format(meet_max_time, "ssss") + "S"' }
						#				xmlelement FromPointRef 			{ value 'Placeref(meet_place_start).plc_identifier' }
						#				xmlelement ToPointRef 				{ value 'Placeref(meet_place_end).plc_identifier' }
						#				xmlelement FromJourneyRef 			{ value 'AtIndex(Get(trip).trp_int_number,1) '}	
						#				xmlelement ToJourneyRef 			{ value 'AtIndex(Get(trip).trp_int_number,2)' }
						#				} # xmlelement ServiceJourneyInterchange
						#			} # xmlelement ServiceJourneyInterchange
						#		} # xmlelement journeyInterchange
						#	} # xmlelement notices			
						} # xmlelement ServiceFrame	
					
					xmlelement TimetableFrame
						{
						xmlattribute id 			{ value 'md_authority + ":TimetableFrame:1"' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlelement contentValidityConditions
							{
							
								
							foreach vehicle_schedule
								{
								var v_valid_days 		{ assign '""' } 
								foreach scheduling_unit_date
									{	
									from 'GetSchedUnitDates(vehicle_schedule, p_SchedSet, p_SchedUnit, p_ProdPhase, p_DateStart, p_DateEnd, p_CalType, p_CalendarId)'
									var v_valid_days 	{ assign 'IF Count(GetSchedUnitDates(getCurrent(vehicle_schedule), p_SchedSet, p_SchedUnit, p_ProdPhase, scud_date, scud_date, p_CalType, p_CalendarId))=1 THEN v_valid_days + "1" ELSe v_valid_days + "0" '} 
																	
									} # foreach scheduling_unit_date			
								
								xmlelement AvailabilityCondition
									{
									xmlattribute id 			{ value 'md_authority + ":AvailabilityCondition:" + v_valid_days + ":" + vsc_int_id' }
									xmlattribute version 		{ value 'md_frameVersion' }
									xmlelement FromDate 		{ value 'p_DateStart + v_time_component_000000' }
									xmlelement ToDate 			{ value 'p_DateEnd + v_time_component_235959' }	
									} # xmlelement AvailabilityCondition
									
								} # foreach
							
							} # xmlelement contentValidityConditions
						
						
						xmlelement vehicleJourneys
							{
							foreach vehicle_schedule
								{
								foreach trip
									{
									from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1).Get(trip, md_trp_valid)'
									condition 'md_trp_valid AND m_trp_is_included'
									unique_on 'vsc_int_id,vsc_sched_type,tpat_route,trp_number'
									sort_by TripStopSort
										{
										criteria vsc_int_id
										criteria vsc_sched_type
										criteria tpat_route
										criteria trp_number
										} # sort_by TripStopSort
									var v_trp_link_index {assign '0'}	
									xmlelement ServiceJourney
										{
										xmlattribute id					{ value 'md_authority + ":" + trim(tpat_route) + "-" + vsc_int_id + "-" + trim(trp_number)' }
										xmlattribute version			{ value 'md_frameVersion' }		
										xmlelement dayTypes
											{
											xmlelement DayTypeRef 
												{
												condition trp_operates_mon
												xmlattribute ref		{ value ' md_authority + ":DayType:Monday" ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_tue
												xmlattribute ref		{ value ' md_authority + ":DayType:Tuesday" ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_wed
												xmlattribute ref		{ value ' md_authority + ":DayType:Wednesday" ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_thu
												xmlattribute ref		{ value ' md_authority + ":DayType:Thursday" ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_fri
												xmlattribute ref		{ value 'md_authority + ":DayType:Friday" ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_sat
												xmlattribute ref		{ value 'md_authority + ":DayType:Saturday" ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_sun
												xmlattribute ref		{ value 'md_authority + ":DayType:Sunday" ' }
												} # xmlelement DayTypeRef
											} # xmlelement dayTypes
										xmlelement JourneyPatternRef
											{
											xmlattribute nameOfRefClass 	{ value '"ServiceJourneyPattern"' }
											xmlattribute ref 				{ value 'md_authority + ":JourneyPattern:" + trim(tpat_route) + ":" + tpat_external_id' }
											} # xmlelement JourneyPatternRef
										
										xmlelement LineRef
											{
											xmlattribute ref 			{ value 'md_authority + ":Line:" + trim(tpat_route)' }
											} # xmlelement LineRef
										xmlelement passingTimes	
											{
											foreach trip_stop
												{
												condition ' stp_node_type = 0 AND Prev().tstp_stop_id <> tstp_stop_id'
												sort_by TstpSort { criteria c1 { value ' tstp_position ' } }
												var v_trp_link_index 		{assign ' v_trp_link_index + 1 '}
												xmlelement TimetabledPassingTime
													{	
													xmlelement StopPointInJourneyPatternRef
														{
														xmlattribute version { value 'md_frameVersion'}
														xmlattribute ref { value 'md_authority + ":StopPointInJourneyPattern:" + trim(trp_route) + "-" + tpat_external_id + "-" + v_trp_link_index' }
														} # xmlelement StopPointInJourneyPatternRef
													
																			
													xmlelement ArrivalTime
														{ 
														condition ' Get(trip_tp, 1).ttp_is_arrival '
														value ' Format(Get(trip_tp, 1).ttp_passing_time, "0hh:mm") ' 
														} # xmlelement ArrivalTime
													
													xmlelement DepartureTime 
														{ 
														condition ' Get(trip_tp, 1).ttp_is_departure '
														value ' Format(Get(trip_tp, 1).ttp_passing_time, "0hh:mm") ' 
														} # xmlelement DepartureTime
													xmlelement DepartureTime 
														{ 
														condition ' NOT Get(trip_tp, 1).ttp_is_departure AND Next().tstp_stop_id = tstp_stop_id '
														value ' Format(Next().Get(trip_tp, 1).ttp_passing_time, "0hh:mm") ' 
														} # xmlelement DepartureTime
														
													} # xmlelement TimetabledPassingTime
												} # foreach trip_stop
											} # xmlelement passingTimes
										
										
										} # xmlelement ServiceJourney
									} # foreach trip
								} #  foreach vehicle_schedule
							} # xmlelement vehicleJourneys
						} # xmlelement TimetableFrame			
					} # xmlelement frames
				} # xmlelement CompositeFrame 
			} # xmlelement dataObjects
		} # xmlelement PublicationDelivery
	} # file line


