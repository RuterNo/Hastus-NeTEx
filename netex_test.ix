basetype date {
	desc "Dates are shown as yyyy-mm-dd, e.g., 2013-05-17"
	mask '!yyyymmdd|xxxx-xx-xx'
}

basetype time	  		{ mask "0hh'mm:ss" }	

definitions MainDefinitions 
	{
	code
	DEFINE m_now_iso8601 { DateToday() + "T" + Format(TimeNow(),"0hh:mm") + ":00" }
	
	DEFINE md_frameVersion { p_JobDate + "-" + Format(p_JobTime, "0hh/mm/ss") }
	DEFINE md_authority { "RUT" }
	DEFINE m_NeTEx_version { "1.04:NO-NeTEx-networktimetable:1.0" }
	DEFINE md_trp_valid CLASS trip
		{
		trp_duration > 0h00 
		}	
	DEFINE md_rte_service_mode CLASS route
		{
		IF rte_service_mode = 0 /* BUS */ THEN
			"bus"
		ELSE IF rte_service_mode = 1 /* TRAMWAY */ THEN
			"tram"
		ELSE IF rte_service_mode = 2 /* METRO */ THEN
			"metro" 
		
		ELSE
			rte_service_mode
		}
	
	 DEFINE md_itn_pnt_coord
		{
		ConcatMultLine(itn_coord, 2)
		}
	DEFINE md_itn_coord
		{
		Concat(itn_coord) 
		}
	DEFINE m_stops_count
		{
		200 - Count(tpat_stops)
		}
		
	DEFINE m_passing_time
		{
		Get(trip_tp, 1).ttp_passing_time
		}

	
	DEFINE m_trp_is_included CLASS trip { trp_is_for_blk }
	DEFINE m_all_trips 
		{
		GetAll(vehicle_schedule).Get(trip, m_trp_is_included)
		}
	DEFINE m_trips
		{
      GetAll(vehicle_schedule, vsc_is_current).Get(trip, trp_is_in_service AND trp_duration > 0h00 AND trp_is_public)
		}
	DEFINE m_stops_on_trips
		{
		m_trips.Get(stop, stp_is_public)
		}
	DEFINE m_trp_veh_disp_codes CLASS trip 
		{ AppendMult(Object(veh_disp_code, trp_vehicle_display),
		Object(veh_disp_code, trp_veh_disp_code_1),
		Object(veh_disp_code, trp_veh_disp_code_2),
		Object(veh_disp_code, trp_veh_disp_code_3),
		Object(veh_disp_code, trp_veh_disp_code_4),
		Object(veh_disp_code, trp_veh_disp_code_5)) }		
	
	DEFINE m_all_sched_unit_dates CLASS vehicle_schedule
		{
		IF p_DateStart <> null AND p_DateEnd <> null AND p_ProdPhase >= 0 THEN
			SortAsc(GetSchedUnitDates(vehicle_schedule,
					                    p_SchedSet, 
                                   p_SchedUnit, 
                                   p_ProdPhase, 
                                   p_DateStart, 
                                   p_DateEnd, 
                                   p_CalType, 
                                   p_CalendarId), scud_date)
		ELSE
			NULL
		}
	DEFINE m_linefile
		{
		
		trp_route + ".xml"
		}
	DEFINE m_trip_stop_condition CLASS trip_stop
		{
		stp_node_type = 0 AND Prev().tstp_stop_id <> tstp_stop_id AND stp_is_public AND (ttp_is_arrival OR ttp_is_departure)
		}
   DEFINE m_trip_point_condition CLASS trip_point
		{
		trppt_departure_trip_stop.stp_node_type = 0 /*N*/ AND trppt_departure_trip_stop.stp_is_public
		}   
	 DEFINE m_stop_condition CLASS stop
		{
		stp_node_type = 0 /*N*/ AND stp_is_public
		}   	
	DEFINE m_last_in_service_stop CLASS trip_point
		{
                             /* Check that current stop is public and there are 
                                no other public stop left on the route. */
      stp_is_public AND Next(stp_is_public) = NULL
		//Next().tstp_stop_id = 301291191 OR Next().tstp_stop_id = 301291251		
		}
	DEFINE m_first_in_service_stop CLASS trip_point
		{
                             /* Check that current stop is public and there are 
                                no other public stop before on the route. */
      stp_is_public AND Prev(stp_is_public) = NULL
      }
   DEFINE m_show_arrival CLASS trip_point
      {
      IF m_last_in_service_stop THEN
         TRUE
      ELSE IF m_first_in_service_stop THEN
         FALSE
      ELSE
         trppt_load_time > 0m OR Get(trip_stop, 1).tstp_pass_flow_rest = 2 /* Debarking only */
      }
   DEFINE m_show_departure CLASS trip_point
      {
      IF m_first_in_service_stop THEN
         TRUE
      ELSE IF m_last_in_service_stop THEN
         FALSE
      ELSE 
       trppt_load_time > 0m OR Get(trip_stop, 1).tstp_pass_flow_rest IN [0, 1] /* No restriction or Boarding only */
      }
	
                             /*--- Specific information ---*/
      DEFINE md_vsc_day_type_from CLASS vehicle_schedule
         { /* Used for looping up to 7 times on the same vehicle_schedule. */
         AppendMult(GetCurrent(vehicle_schedule), GetCurrent(vehicle_schedule),
                    GetCurrent(vehicle_schedule), GetCurrent(vehicle_schedule),
                    GetCurrent(vehicle_schedule), GetCurrent(vehicle_schedule),
                    GetCurrent(vehicle_schedule)) }                             
      DEFINE md_calendar_op_day_post CLASS scheduling_unit_date {
                             /* When a single day schedule type is used we return
                                the day type of the schedule type, otherwise we
                                return the day type of the date. */
         IF scud_vehicle_sched.vsc_sched_type IN [6,13,14,11,3,4,5] /* Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday */ THEN
            md_date_vsc_type_day
         ELSE
            md_calendar_op_day
         }
      DEFINE md_calendar_op_day CLASS scheduling_unit_date {
         scud_day       
         }
      DEFINE md_date_vsc_type_day CLASS scheduling_unit_date {
                             /* For performance reason the schedule type are not
                                in order of day. */
         IF scud_vehicle_sched.vsc_sched_type = 6 /* Sunday */ THEN
            "0"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 5 /* Saturday */ THEN
            "6"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 4 /* Friday */ THEN
            "5"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 3 /* Thursday */ THEN
            "4"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 11 /* Wednesday */ THEN
            "3"
         ELSE IF scud_vehicle_sched.vsc_sched_type = 13 /* Monday */ THEN
            "1"
         ELSE /* Tuesday */
            "2"
         }

	end
	} # definitions MainDefinitions 

var v_source							{ type 'string'  assign 'IF p_CalendarId<>NULL THEN p_CalendarId ELSE IF p_SchedUnit<>NULL THEN p_SchedUnit '}
var v_tpat_link_index 					{ type 'integer' assign '0' }
var v_trp_link_index 					{ type 'integer' assign '0' }
var v_stop_ass_link_index 				{ type 'integer' assign '0'}
var v_temproute							{ type 'string' }
var v_valid_days						{ type 'string' } 
var v_time_component_000000 { type 'string' assign '"T00:00:00+01:00"' }
var v_time_component_235959 { type 'string' assign '"T23:59:59+01:00"' }
var v_vdc1 { type 'string' }
var v_vdc2 { type 'string'  }
var v_vdc3 { type 'string' }
var v_vdc4 { type 'string'  }
var v_vdc5 { type 'string'  }
var v_vdc1_stop { type 'string'  }
var v_vdc2_stop { type 'string'  }
var v_vdc3_stop { type 'string' }
var v_vdc4_stop { type 'string' }
var v_vdc5_stop { type 'string' }
var v_day_type_loop_count { type 'integer' assign '0' }

parameter p_ExportIdentifier {
	title 'Enter refereece for this export, without spaces'
	desc ''
	type string
	def_value 'default'
}
parameter p_InclItineraryCoordinates {
	title 'Include timing links with coordinates'
	desc ''
	type boolean
	def_value 'FALSE'
}
parameter p_InclSiteFrame {
	title 'Include SiteFrame (with StopPlace and Quay definitions)'
	desc ''
	type boolean
	def_value 'TRUE'
}
parameter p_InclVehicleScheduleFrame {
	title 'Include blocking information'
	desc ''
	type boolean
	def_value 'FALSE'
}

parameter p_RuterAdaptations {
	title 'Use Ruter adaptations for vehicle display codes'
	desc ''
	type boolean
	def_value 'TRUE'
}

parameter p_inclInterchanges {
	title 'Include interchanges based on meets'
	desc ''
	type boolean
	def_value 'FALSE'
}

file common 
	{ 
   name ' "_common_" + p_ExportIdentifier + "_" + md_frameVersion + ".xml" '
   schema 'none'   
	xmlelement PublicationDelivery 
		{
		xmlattribute xmlns { value '"http://www.netex.org.uk/netex"' }
		xmlattribute xmlns:gml { value '"http://www.opengis.net/gml/3.2"' }
		xmlattribute version { value 'm_NeTEx_version' }
		
		xmlelement PublicationTimestamp { value 'm_now_iso8601'  }
		xmlelement ParticipantRef       { value 'md_authority' }
		
		xmlelement dataObjects
			{
			
			xmlelement CompositeFrame 
				{				
				xmlattribute id 					   { value 'md_authority + ":CompositeFrame:" + p_ExportIdentifier' }
				xmlattribute version 				{ value '"any"' }
				xmlattribute modification 			{ value '"new"' }
				
				xmlelement validityConditions
					{
					xmlelement ValidBetween
						{
						
						xmlelement FromDate  { value 'p_DateStart + v_time_component_000000' }
						xmlelement ToDate 	{ value 'p_DateEnd + v_time_component_235959' }
						} # xmlelement ValidBetween
					} # xmlelement validityConditions	
				xmlelement codespaces
					{
					xmlelement Codespace
						{
						xmlattribute id					{ value '"RUT"' }
						xmlelement Xmlns				   { value '"RUT"' }
						xmlelement XmlnsUrl				{ value '"http://www.rutebanken.org/ns/rut"' }
						xmlelement Description			{ value '"Ruter"' }
						} # xmlelement Codespace
					xmlelement Codespace
						{
						xmlattribute id					{ value '"NSR"' }
						xmlelement Xmlns				   { value '"NSR"' }
						xmlelement XmlnsUrl				{ value '"http://www.rutebanken.org/ns/nsr"' }
						xmlelement Description			{ value '"Nasjonalt stoppestedsregister"' }
						} # xmlelement Codespace
					} # xmlelement codespaces
				xmlelement FrameDefaults 
					{
					xmlelement DefaultDataSourceRef 
						{
						xmlattribute ref 			     { value 'md_authority + ":DataSource:1"' }
						xmlattribute version			{ value 'md_frameVersion' }
						} # xmlelement DefaultDataSourceRef 
						xmlelement DefaultLocale
						{
						xmlelement TimeZone				{ value '"CET"' }
						} #xmlelement DefaultLocale
					} # xmlelement FrameDefaults
				xmlelement versions
					{
					xmlelement Version 
						{
						xmlattribute id 				   { value 'md_authority + ":Version:" + md_frameVersion' }
						xmlattribute version 			{ value 'md_frameVersion' }
						xmlelement StartDate 			{ value 'p_DateStart + v_time_component_000000' }
						xmlelement EndDate 				{ value 'p_DateEnd + v_time_component_235959' }						
						} # xmlelement Version 
					} # xmlelement versions
				xmlelement frames
					{
					xmlelement ResourceFrame 
						{
						xmlattribute id 				   { value 'md_authority + ":ResourceFrame:" + p_ExportIdentifier' }
						xmlattribute version 			{ value 'md_frameVersion' }
						xmlelement dataSources
							{
							xmlelement DataSource 
								{
								xmlattribute id 				{ value 'md_authority + ":DataSource:1"' }
								xmlattribute version 	   { value 'md_frameVersion' }
								xmlelement Name 				{ value '"Hastus-Ruter"' }
								xmlelement Description		{ value '"Hastus 2013 by GIRO"' }
								xmlelement Email				{ value '"support@ruter.no"' }
								} # xmlelement DataSource 
							} # xmlelement dataSources
						 
						xmlelement organisations
							{						
							foreach Contractor
								{
								unique_on 'cntr_identifier'
								xmlelement Operator
									{
									xmlattribute id 							{ value 'md_authority + ":Operator:" + cntr_identifier' }
									xmlattribute version 					{ value 'md_frameVersion' }	
									xmlelement Name 							{ value 'cntr_description' }
									
									xmlelement ContactDetails
										{
										xmlelement Email						{ value '"dummy@dummy.no"' }
										} # xmlelement ContactDetails
									xmlelement Address
										{
										xmlelement AddressLine1				{ value '"Storgata 999"' }
										xmlelement Town						{ value '"1234 Lillevik"' }
										}
									xmlelement CustomerServiceContactDetails
										{
										xmlelement Email						{ value '"dummy@dummy.no"' }
										} # xmlelement CustomerServiceContactDetails
									} # xmlelement Operator
								} # foreach Contractor
							
							xmlelement Authority
								{
								xmlattribute id 				{ value 'md_authority + ":Authority:" + md_authority' }
								xmlattribute version 		{ value 'md_frameVersion' }
								xmlelement Name 				{ value 'md_authority' }
								xmlelement ContactDetails
									{
									xmlelement Email			{ value '"support@ruter.no"' }
									} # xmlelement ContactDetails
								
								} # xmlelement Authority
								
							} # xmlelement organisations					
						} # xmlelement ResourceFrame	
					
					xmlelement ServiceCalendarFrame
						{
						xmlattribute id 				{ value 'md_authority + ":ServiceCalendarFrame:" + p_ExportIdentifier' }
						xmlattribute version 		{ value '"any"' }
						
						xmlelement ServiceCalendar
							{
							xmlattribute id			{ value ' md_authority + ":ServiceCalendar:1" ' }
							xmlattribute version		{ value '"any"' }
							xmlelement dayTypes
								{
								foreach vehicle_schedule
									{
                           condition 'vsc_is_current'
                           var v_day_type_loop_count { assign '0' }
                           foreach vehicle_schedule
                              {
                              desc "This loop is done to print 7 sections DayType for each vehicle schedule."
                              from 'md_vsc_day_type_from'

										xmlelement DayType
											{
											xmlattribute version 			{ value '"any"' }
											xmlattribute id					{ value 'md_authority + ":DayType:" + v_day_type_loop_count + "-" + vsc_int_id' }
											} # xmlelement DayType
                              var v_day_type_loop_count { assign 'v_day_type_loop_count + 1' }                                 
                              } # foreach vehicle_schedule						
									} # foreach vehicle_schedule
								} # xmlelement dayTypes
							} # xmlelement ServiceCalendar												
						
						xmlelement dayTypeAssignments
							{
                     foreach vehicle_schedule
                        {
                        condition 'vsc_is_current'
                        group_by AllSchedules
                           {
                           desc "This group_by is used to put all children of an object
                                 (scheduling_unit_date) in common. We can then sort the children
                                 object afterward."
                           key_part ConstantKey { value 'NULL' }
                           }    
                           
                         foreach scheduling_unit_date
                           {
                           from 'GetSchedUnitDates(GetCurrent(vehicle_schedule), p_SchedSet, p_SchedUnit, p_ProdPhase, 
                                                   p_DateStart, p_DateEnd, p_CalType, p_CalendarId)'                         
                           sort_by Date
                              {
                              desc "This sort_by work because of the group_by at vehicle_schedule
                                    level."
                              criteria scud_date
                              }
                           xmlelement DayTypeAssignment
                              {
                              xmlattribute version 			{ value '"any"' }
                              xmlattribute order				{ value '"1"' }
                              xmlattribute id					{ value 'md_authority + ":DayTypeAssignment:" + md_calendar_op_day_post + "-" + scud_vehicle_sched.vsc_int_id + "-" + Format(scud_date, "!yyyymmdd")' }
                              xmlelement Date					{ value 'scud_date' }	
                              xmlelement DayTypeRef
                                 {
                                 xmlattribute version 		{ value '"any"' }
                                 xmlattribute ref 			   { value 'md_authority + ":DayType:" + md_calendar_op_day_post + "-" + scud_vehicle_sched.vsc_int_id' } 
                                 } # xmlelement DayTypeRef
                              } # xmlelement DayTypeAssignment                              
                           } # foreach scheduling_unit_date                        
                        } # foreach vehicle_schedule                     							
							} # xmlelement dayTypeAssignments
						} # xmlelement ServiceCalendarFrame
                  
					xmlelement SiteFrame
                  {
                  xmlattribute id 			   { value 'md_authority + ":SiteFrame:" + p_ExportIdentifier' }
                  xmlattribute version 		{ value 'md_frameVersion' }
                  condition ' p_InclSiteFrame '
                  xmlelement stopPlaces
                     {
                     foreach stop
                        {
                        from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
                        condition 'm_stop_condition'
                        sort_by StopSort
                           {
                           criteria stp_id_regtopp_calc
                           } # sort_by StopSort                        
                        group_by StopGroup
                           {
                           key_part 'stp_id_regtopp_calc'
                           }
                        
                        xmlelement StopPlace
                           {
                           xmlattribute id               { value 'md_authority + ":StopPlace:" + stp_id_regtopp_calc' }
                           xmlattribute version          { value '"any"' }
                           xmlelement Name    				{ value 'stp_alternate_name' }
                           xmlelement StopPlaceType 		{ value ' "other" ' }
                           xmlelement quays 
                              {
                              foreach stop
                                 {
                                 from 'THIS stop'
                                 unique_on 'stp_identifier'
                                 sort_by StopSort
                                    {
                                    criteria stp_id_regtopp_calc
                                    criteria stp_identifier
                                    } # sort_by StopSort                                    
                                 xmlelement Quay 
                                    {
                                    xmlattribute id { value 'md_authority + ":Quay:" + stp_identifier' }
                                    xmlattribute version { value '"any"' }
                                    xmlelement Centroid
                                       {
                                       xmlelement Location
                                          {
                                          xmlelement Longitude	{ value ' loca_longitude ' } 
                                          xmlelement Latitude	{ value ' loca_latitude ' }
                                          } # xmlelement Location
                                       } # xmlelement Centroid
                                    } # xmlelement Quay
                                 } # foreach stop
                              } # xmlelement quays
                           } #xmlelement StopPlace
                        } # foreach trip_point
                     } # xmlelement stopPlaces								
					   } # xmlelement SiteFrame
                  
               xmlelement ServiceFrame
                  {
                  xmlattribute id 			{ value 'md_authority + ":ServiceFrame:" + p_ExportIdentifier' }
                  xmlattribute version    { value 'md_frameVersion' }

                  xmlelement Network
                     {
                     xmlattribute id 			   { value 'md_authority + ":Network:1"' }
                     xmlattribute version 		{ value 'md_frameVersion' }
                     xmlelement Name				{ value '"Ruter"' }
                     xmlelement AuthorityRef
                        {
                        xmlattribute ref		   { value ' md_authority + ":Authority:" + md_authority ' }
                        xmlattribute version 	{ value 'md_frameVersion' }
                        }
                     

                     } # xmlelement Network
                     
                  xmlelement directions
                     {
                     xmlelement Direction
                        {
                        xmlattribute id			{ value 'md_authority + ":Direction:1"' }
                        xmlattribute version 	{ value '"any"' }
                        xmlelement Name			{ value '"1"' }
                        xmlelement Description	{ value '"Eastbound for city lines, for regional lines inbound to Oslo"' }
                        }
                     xmlelement Direction
                        {
                        xmlattribute id			{ value 'md_authority + ":Direction:2"' }
                        xmlattribute version 	{ value '"any"' }
                        xmlelement Name			{ value '"2"' }
                        xmlelement Description	{ value '"Westbound for city lines, for regional lines outbound from Oslo"' }
                        }
                     } # xmlelement directions
                  
                  xmlelement routePoints
                     {
                     foreach stop
                        {
                        from 'm_stops_on_trips'
                        unique_on 'stp_identifier'
                        sort_by StopSort
                           {
                           criteria stp_identifier
                           }
                        xmlelement RoutePoint
                           {							
                           xmlattribute id 			{ value 'md_authority + ":RoutePoint:" + stp_identifier' }
                           xmlattribute version 	{ value 'md_frameVersion' }
                           xmlelement projections
                              {
                              xmlelement PointProjection
                                 {
                                 xmlattribute id			{ value 'md_authority + ":PointProjection:" + stp_identifier' }
                                 xmlattribute version	   { value 'md_frameVersion' }
                                 xmlelement ProjectedPointRef
                                    {
                                    xmlattribute ref     { value 'md_authority + ":ScheduledStopPoint:" + stp_identifier ' }
                                    xmlattribute version { value '"any"' }
                                    } # xmlelement ProjectedPointRef	
                                 } # xmlelement PointProjection
                              } # xmlelement projections
                           } # xmlelement RoutePoint
                        } # foreach stop
                     } # xmlelement routePoints
                  
                  xmlelement destinationDisplays
                     {
                     foreach veh_disp_code
                        {
                        from 'Different(m_trips.m_trp_veh_disp_codes)'
                        
                        unique_on ' vdc_id '
                         sort_by VDCSort
                           {
                           criteria vdc_id
                           }
                        xmlelement DestinationDisplay
                           {
                           xmlattribute id 				{ value 'md_authority + ":DestinationDisplay:" + vdc_id' }
                           xmlattribute version 		{ value 'md_frameVersion' }
                           #xmlelement Name 				{ value 'vdc_message1' }
                           xmlelement FrontText 		{ value 'vdc_message1' }
                           } # xmlelement DestinationDisplay					
                        } # foreach veh_disp_code
                     } # xmlelement destinationDisplays
                     
                  xmlelement scheduledStopPoints
                     {
                     foreach stop
                        {
                        from 'm_stops_on_trips'
                        unique_on 'stp_identifier'
                        sort_by StopSort
                           {
                           criteria stp_identifier
                           }
                        xmlelement ScheduledStopPoint
                           {
                           xmlattribute id 				{ value 'md_authority + ":ScheduledStopPoint:" + stp_identifier' }
                           xmlattribute version 		{ value '"any"' }
                           xmlelement Name 				{ value 'stp_alternate_name' } # User def attribute (Regtopp)
                           } # xmlelement ScheduledStopPoint
                        } # foreach stop
                     } # xmlelement scheduledStopPoints
                  
                  xmlelement stopAssignments
                     {
                     foreach stop
                        {
                        from 'm_stops_on_trips'
                        unique_on 'stp_identifier'
                        sort_by StopSort
                           {
                           criteria stp_identifier
                           }
                        var v_stop_ass_link_index { assign ' v_stop_ass_link_index + 1 ' }
                        xmlelement PassengerStopAssignment
                           {
                           xmlattribute id 				   { value 'md_authority + ":PassengerStopAssignment:" + stp_identifier' }
                           xmlattribute version 			{ value 'md_frameVersion' }
                           xmlattribute order				{ value 'v_stop_ass_link_index' }
                           xmlelement ScheduledStopPointRef
                              {
                              xmlattribute ref 			   { value 'md_authority + ":ScheduledStopPoint:" + stp_identifier' }
                              xmlattribute version 		{ value '"any"' }
                              }
                           xmlelement StopPlaceRef
                              {
                              xmlattribute ref			   { value 'md_authority + ":StopPlace:" + stp_id_regtopp_calc' }
                              xmlattribute version 		{ value '"any"' }
                              }
                           xmlelement QuayRef	
                              {
                              xmlattribute ref			   { value 'md_authority + ":Quay:" + stp_identifier' }
                              xmlattribute version 		{ value '"any"' }
                              }
                           } # xmlelement PassengerStopAssignment
                        } # foreach stop
                     } # xmlelement stopAssignments
                        
                  xmlelement timingLinks
                     {
                     condition 'p_InclItineraryCoordinates'
                     foreach trip_pattern_point
                        {
                        from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_pattern).get(trip_pattern_point)'
                        condition 'Prev().stp_identifier <> "" AND stp_identifier <> "" AND Prev().stp_identifier <> stp_identifier  '
                        unique_on 'Prev().stp_identifier, stp_identifier '
                        sort_by TripPatternStopSort
                           {
                           criteria Prev().stp_identifier
                           criteria stp_identifier
                           criteria tpatpt_distance
                           } # sort_by TripPatternStopSort
                         
                        xmlelement TimingLink
                           {
                           xmlattribute id 						{ value 'md_authority + ":TimingLink:" + Prev().stp_identifier + "-" + stp_identifier' }
                           xmlattribute version 				{ value 'md_frameVersion' }
                           xmlelement Distance 					{ value 'Trim(Format(tpatpt_distance,"zzzzz.n"))' }
                           xmlelement FromPointRef
                              { 
                              xmlattribute ref 		      { value 'md_authority + ":ScheduledStopPoint:" + Prev().stp_identifier' }
                              xmlattribute version 		{ value '"any"' }
                              } # xmlelement FromPointRef
                           xmlelement ToPointRef
                              {
                              xmlattribute ref 		      { value 'md_authority + ":ScheduledStopPoint:" + stp_identifier' }
                              xmlattribute version 		{ value '"any"' }
                              } # xmlelement ToPointRef
                           xmlelement gml:LineString
                              {
                              xmlattribute srsName       { value ' "32632" ' }
                              xmlelement gml:posList 
                                 {
                                 xmlattribute srsDimension	{ value ' "2" ' }
                                 value 'md_itn_coord'
                                 }
                              } # xmlelement gml:LineString
                           } # xmlelement TimingLink
                        } # foreach trip_pattern_point
                     } # xmlelement timingLinks
                     
                  } # xmlelement ServiceFrame	
					} # xmlelement frames
				} # xmlelement CompositeFrame 
			} # xmlelement dataObjects
		} # xmlelement PublicationDelivery
	} # file common

file lines 
	{
	name 'Trim(Get(route).rte_identifier) + "_" + md_frameVersion + ".xml"'
   schema 'none'
	foreach trip
		{
		from 'm_trips'
      #unique_on 'trp_route'
		
      group_by Route
         {
         key_part 'Get(route).rte_identifier'
         }
		
		xmlelement PublicationDelivery 
			{
			xmlattribute xmlns { value '"http://www.netex.org.uk/netex"' }
			xmlattribute xmlns:gml { value '"http://www.opengis.net/gml/3.2"' }
			xmlattribute version { value 'm_NeTEx_version' }
			
			xmlelement PublicationTimestamp { value 'm_now_iso8601' }
			xmlelement ParticipantRef { value '"NDOV"' }
			
			xmlelement dataObjects
				{
				xmlelement CompositeFrame 
					{				
					xmlattribute id 					{ value 'md_authority + ":CompositeFrame:" + Trim(Get(route).rte_identifier)' }
					xmlattribute version 				{ value '"any"' }
					xmlattribute modification 			{ value '"new"' }
					xmlelement validityConditions
						{
						xmlelement ValidBetween
							{
							
							xmlelement FromDate { value 'p_DateStart + v_time_component_000000' }
							xmlelement ToDate 	{ value 'p_DateEnd + v_time_component_235959' }
							} # xmlelement ValidBetween
						} # xmlelement validityConditions	
					xmlelement codespaces
						{
						xmlelement Codespace
							{
							xmlattribute id					{ value '"RUT"' }
							xmlelement Xmlns				{ value '"RUT"' }
							xmlelement XmlnsUrl				{ value '"http://www.rutebanken.org/ns/rut"' }
							xmlelement Description			{ value '"Ruter"' }
							} # xmlelement Codespace
						xmlelement Codespace
							{
							xmlattribute id					{ value '"NSR"' }
							xmlelement Xmlns				{ value '"NSR"' }
							xmlelement XmlnsUrl				{ value '"http://www.rutebanken.org/ns/nsr"' }
							xmlelement Description			{ value '"Nasjonalt stoppestedsregister"' }
							} # xmlelement Codespace
						} # xmlelement codespaces
					xmlelement FrameDefaults 
						{
						xmlelement DefaultDataSourceRef 
							{
							xmlattribute ref 			{ value 'md_authority + ":DataSource:1"' }
							} # xmlelement DefaultDataSourceRef 
							xmlelement DefaultLocale
							{
							xmlelement TimeZone				{value ' "CET" ' }
							} #xmlelement DefaultLocale
						} # xmlelement FrameDefaults

					xmlelement frames
						{						
						xmlelement ServiceFrame
							{
							xmlattribute id 			{ value 'md_authority + ":ServiceFrame:" + Trim(Get(route).rte_identifier)' }
							xmlattribute version    { value 'md_frameVersion' }
						
						   xmlelement routes
								{
								foreach trip
									{
                           from 'THIS trip'
								   #from 'm_trips'
									unique_on 'trp_route, trp_pattern'
									sort_by TripSort
										{
										criteria trp_route
										criteria trp_pattern
										} # sort_by TripSort
                           							
									var v_tpat_link_index 		{assign '0'}	                    
									xmlelement Route
										{
										xmlattribute id 				{ value 'md_authority + ":Route:" + Trim(trp_route) + "-" + trp_pattern' }
										xmlattribute version 		{ value 'md_frameVersion' }
										xmlelement Name 				{ value 'Get(stop, 1).stp_alternate_name + "-" + Get(stop, "*").stp_alternate_name' }
										xmlelement LineRef
											{
											xmlattribute version 	{ value '"any"' }
											xmlattribute ref 			{ value 'md_authority + ":Line:" + Trim(rte_identifier)' }
											} # xmlelement LineRef
										xmlelement DirectionRef
											{
											# xmlattribute version 	{ value '"any"' }
											xmlattribute ref 			{ value 'md_authority + ":Direction:" + Format(tpat_direction, "n")' }
											} # xmlelement
										
										xmlelement pointsInSequence
											{
											foreach trip_point
												{												
												condition 'm_trip_point_condition'
												var v_tpat_link_index 		{assign ' v_tpat_link_index + 1 '}
																				
												xmlelement PointOnRoute
													{
													xmlattribute id 			{ value 'md_authority + ":PointOnRoute:" + Trim(tpat_route) + "-" + trp_pattern + "-" + v_tpat_link_index' }
													xmlattribute version    { value 'md_frameVersion' }
													xmlelement RoutePointRef
														{
														xmlattribute ref		{ value 'md_authority + ":RoutePoint:" + stp_identifier' }
														# xmlattribute version	{ value 'md_frameVersion' }
														} # xmlelement PointRef
													} # xmlelement PointOnRoute
												} # foreach trip_pattern_point
											} # xmlelement pointsInSequence
										} # xmlelement Route*/
									} # foreach trip_pattern
								} # xmlelement routes
							
							xmlelement lines
								{
								foreach trip
									{
                           from 'THIS trip'
                           #from 'm_trips'
                           unique_on 'trp_route'									
									sort_by 'trp_route'
                           
									xmlelement Line
										{
										xmlattribute id 			   { value 'md_authority + ":Line:" + Trim(trp_route)' }
										xmlattribute version 	   { value '"any"' }
										
										xmlelement Name 			   { value 'Object(route, trp_route).rte_description' }
										
										xmlelement TransportMode   { value ' IF rte_service_type = 4 THEN "water"
																			ELSE IF rte_service_type = 1 THEN "bus"
																			ELSE IF rte_service_type = 9 THEN "bus"
																			ELSE IF rte_service_type = 7 THEN "metro"
																			ELSE IF rte_service_type = 6 THEN "tram"
																			ELSE "bus" ' }
										xmlelement TransportSubMode
											{
											xmlelement WaterSubmode		
												{
												condition ' rte_service_type = 4 '										
												value '"localPassengerFerry"' 
												}
											xmlelement BusSubmode		
												{
												condition ' rte_service_type = 0 '										
												value '"airportLinkBus"' 
												}
											xmlelement BusSubmode		
												{
												condition ' rte_service_type = 1 OR rte_service_type = 12 '										
												value '"localBus"' 
												} # 12 is Flexi - to be moved to FlexibleLine
											xmlelement BusSubmode		
												{
												condition ' rte_service_type = 2 '										
												value '"expressBus"' 
												}
											xmlelement BusSubmode		
												{
												condition ' rte_service_type = 9 '										
												value '"schoolBus"' 
												}
											xmlelement BusSubmode		
												{
												condition ' rte_service_type = 13 '										
												value '"nightBus"' 
												}
											xmlelement MetroSubmode		
												{
												condition ' rte_service_type = 7 '										
												value '"metro"' 
												}
											xmlelement TramSubmode		
												{
												condition ' rte_service_type = 6 '										
												value '"localTram"' 
												}
											}
											
										xmlelement PublicCode 	   { value 'Trim(Object(route, trp_route).rte_pub_id)' }
										xmlelement OperatorRef
											{
											xmlattribute ref 			{ value 'md_authority+":Operator:"+ Object(route, trp_route).rte_oper_company' }
											} # xmlelement AuthorityRef
										xmlelement Monitored 		{ value 'IF trp_is_in_service THEN "true" ELSE "false"' }
										xmlelement RepresentedByGroupRef
											{
											xmlattribute ref		   { value 'md_authority + ":Network:1"' }
											# xmlattribute version	{ value ' "any" ' }
											} # xmlelement RepresentedByGroupRef
										
										} # xmlelement Line														
									} # foreach trip
								} # xmlelement lines
                     
							xmlelement journeyPatterns
								{
								foreach trip
									{
                           from 'THIS trip'
                           #from 'm_trips'                           
									unique_on 'trp_route, trp_pattern'
									sort_by TripSort
										{
										criteria trp_route
										criteria trp_pattern
										} # sort_by TripSort
									
									var v_tpat_link_index {assign '0'}	
																		
									var v_vdc1 { assign 'IF p_RuterAdaptations THEN trp_veh_disp_code_1 ELSE ""' }
									var v_vdc2 { assign 'IF p_RuterAdaptations THEN trp_veh_disp_code_2 ELSE ""' }
									var v_vdc3 { assign 'IF p_RuterAdaptations THEN trp_veh_disp_code_3 ELSE ""' }
									var v_vdc4 { assign 'IF p_RuterAdaptations THEN trp_veh_disp_code_4 ELSE ""' }
									var v_vdc5 { assign 'IF p_RuterAdaptations THEN trp_veh_disp_code_5 ELSE ""' }
									var v_vdc1_stop { assign 'IF p_RuterAdaptations THEN trp_stop_id_1 ELSE ""' }
									var v_vdc2_stop { assign 'IF p_RuterAdaptations THEN trp_stop_id_2 ELSE ""' }
									var v_vdc3_stop { assign 'IF p_RuterAdaptations THEN trp_stop_id_3 ELSE ""' }
									var v_vdc4_stop { assign 'IF p_RuterAdaptations THEN trp_stop_id_4 ELSE ""' }
									var v_vdc5_stop { assign 'IF p_RuterAdaptations THEN trp_stop_id_5 ELSE ""' }
									xmlelement JourneyPattern
										{
										
										xmlattribute id 			   { value 'md_authority + ":JourneyPattern:" + Trim(trp_route) + "-" + trp_pattern' }
										xmlattribute version 	   { value 'md_frameVersion' }
										xmlelement RouteRef
											{
											xmlattribute ref		   { value 'md_authority + ":Route:" + Trim(trp_route) +  "-" + trp_pattern'}
											xmlattribute version    { value 'md_frameVersion' }
											} # xmlelement RouteRef
										xmlelement pointsInSequence
											{
											foreach trip_point
												{												
												condition 'm_trip_point_condition'
												var v_tpat_link_index 		{assign ' v_tpat_link_index + 1 '}
												xmlelement StopPointInJourneyPattern
													{
													xmlattribute id 			{ value 'md_authority + ":StopPointInJourneyPattern:" + Trim(trp_route) + "-" + trp_pattern + "-" + v_tpat_link_index' }												
													xmlattribute version 	{ value 'md_frameVersion' }
													xmlattribute order 		{ value 'v_tpat_link_index' }	
													xmlelement ScheduledStopPointRef
														{
														xmlattribute ref 		{ value 'md_authority + ":ScheduledStopPoint:" + stp_identifier' }
														# xmlattribute version 		{ value '"any"' }
														} # xmlelement ScheduledStopPointRef
													xmlelement ForAlighting
														{
                                          desc "Only exported when there is no alighting. There is no 
                                                alighting when the stop is Boarding only or Not allowed.
                                                Alighting is always permitted when there is loading time."
														condition 'Get(trip_stop, 1).tstp_pass_flow_rest IN [1, 3] AND 
                                                     trppt_load_time = 0m'
														value ' "false" '
														} # xmlelement forAlighting
													xmlelement ForBoarding
														{
                                          desc "Only exported when there is no boarding. There is no 
                                                boarding when the stop is Debarking only or Not allowed.
                                                Boarding is always permitted when there is loading time."
														condition 'Get(trip_stop, 1).tstp_pass_flow_rest IN [2, 3] AND
                                                     trppt_load_time = 0m'
														value ' "false" '
														} # xmlelement forBoarding													
																									
													xmlelement DestinationDisplayRef
														{
														# default handling
														condition 'trp_vehicle_display <> "" AND m_first_in_service_stop'
														xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + trp_vehicle_display' }
														}
													
													xmlelement DestinationDisplayRef
														{
														condition 'stp_identifier = v_vdc1_stop'
														xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc1' }
														#var v_vdc1_stop { assign ' "" ' }
														#xmlattribute version 		{ value 'md_frameVersion' }
														} # xmlelement DestinationDisplayRef	
													
													xmlelement DestinationDisplayRef
														{
														condition 'stp_identifier = v_vdc2_stop'
														xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc2' }
														#var v_vdc2_stop { assign ' "" ' }
														#xmlattribute version 		{ value 'md_frameVersion' }
														} # xmlelement DestinationDisplayRef	
													
													xmlelement DestinationDisplayRef
														{
														condition 'stp_identifier = v_vdc3_stop'
														xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc3' }
														#var v_vdc3_stop { assign ' "" ' }
														#xmlattribute version 		{ value 'md_frameVersion' }
														} # xmlelement DestinationDisplayRef	
													
													xmlelement DestinationDisplayRef
														{
														condition 'stp_identifier = v_vdc4_stop'
														xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc4' }
														#var v_vdc4_stop { assign ' "" ' }
														#xmlattribute version 		{ value 'md_frameVersion' }
														} # xmlelement DestinationDisplayRef	
													
													xmlelement DestinationDisplayRef
														{
														condition 'stp_identifier = v_vdc5_stop'
														xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + v_vdc5' }
														#var v_vdc5_stop { assign ' "" ' }
														#xmlattribute version 		{ value 'md_frameVersion' }
														} # xmlelement DestinationDisplayRef	
													} # xmlelement StopPointInJourneyPattern								
												} # foreach trip_pattern_point						
											} # xmlelement pointsInSequence
										} # xmlelement JourneyPattern
									} # foreach trip_pattern
								} # xmlelement journeyPatterns
								
								
							} # xmlelement ServiceFrame	

						xmlelement TimetableFrame
							{	
							xmlattribute id 			{ value 'md_authority + ":TimetableFrame:" + Trim(rte_identifier)' }
							xmlattribute version    { value 'md_frameVersion' }
																		 												
							xmlelement vehicleJourneys
								{								
								foreach trip
									{
                           from 'THIS trip'
                           #from 'm_trips'                           
									sort_by TripStopSort
										{
										criteria vsc_int_id
										criteria vsc_sched_type
										criteria trp_route
										criteria trp_number
										} # sort_by TripStopSort										
									var v_trp_link_index {assign '0'}	
									xmlelement ServiceJourney
										{
										xmlattribute id				{ value 'md_authority + ":ServiceJourney:" + Trim(trp_route) + "-" + vsc_int_id + "-" + Trim(trp_number)' }
										xmlattribute version			{ value 'md_frameVersion' }		
										xmlelement dayTypes
											{
											xmlelement DayTypeRef 
												{
												condition trp_operates_mon
												xmlattribute ref		{ value ' md_authority + ":DayType:1-" + vsc_int_id ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_tue
												xmlattribute ref		{ value ' md_authority + ":DayType:2-" + vsc_int_id ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_wed
												xmlattribute ref		{ value ' md_authority + ":DayType:3-" + vsc_int_id ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_thu
												xmlattribute ref		{ value ' md_authority + ":DayType:4-" + vsc_int_id ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_fri
												xmlattribute ref		{ value 'md_authority + ":DayType:5-" + vsc_int_id ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_sat
												xmlattribute ref		{ value 'md_authority + ":DayType:6-" + vsc_int_id ' }
												} # xmlelement DayTypeRef
											xmlelement DayTypeRef 
												{
												condition trp_operates_sun
												xmlattribute ref		{ value 'md_authority + ":DayType:0-" + vsc_int_id ' }
												} # xmlelement DayTypeRef
											} # xmlelement dayTypes
										xmlelement JourneyPatternRef
											{
											xmlattribute ref 				{ value 'md_authority + ":JourneyPattern:" + Trim(trp_route) + "-" + trp_pattern' }
											xmlattribute version 		{ value 'md_frameVersion' }
											} # xmlelement JourneyPatternRef
															
										xmlelement passingTimes	
											{
											foreach trip_point
												{
												condition 'm_trip_point_condition'												
												var v_trp_link_index 		{assign ' v_trp_link_index + 1 '}
												xmlelement TimetabledPassingTime
													{	
													xmlelement StopPointInJourneyPatternRef
														{
														xmlattribute version { value 'md_frameVersion'}
														xmlattribute ref { value 'md_authority + ":StopPointInJourneyPattern:" + Trim(trp_route) + "-" + trp_pattern + "-" + v_trp_link_index' }
														} # xmlelement StopPointInJourneyPatternRef					
													xmlelement ArrivalTime
														{
														condition 'm_show_arrival'
														value 'Format(trppt_arrival_time, "0hh~/mm/ss|xx:xx:xx")' 
														} # xmlelement ArrivalTime
													xmlelement ArrivalDayOffset
														{
														condition 'trppt_arrival_time >= 24:00 AND m_show_arrival'
														value '"1"'
														}														
													xmlelement DepartureTime 
														{
														condition 'm_show_departure'
														value 'Format(trppt_departure_time, "0hh~/mm/ss|xx:xx:xx")' 
														} # xmlelement DepartureTime
													xmlelement DepartureDayOffset
														{
														condition 'trppt_departure_time >= 24:00 AND m_show_departure'
														value ' "1" '
														}
													} # xmlelement TimetabledPassingTime
												} # foreach trip_stop
											} # xmlelement passingTimes										
										
										} # xmlelement ServiceJourney
										var v_trp_link_index 		{assign ' 0 '}
									} # foreach trip
								} # xmlelement vehicleJourneys
							xmlelement journeyInterchanges
								{
								condition p_inclInterchanges
								foreach trip_meet
									{
									from 'GetAll(vehicle_schedule, vsc_is_current).Get(meet_builder).Get(trip_meet)'
									xmlelement ServiceJourneyInterchange
										{
										xmlattribute ref 					{ value 'md_authority + ":ScheduledStopPoint:" + stp_identifier' }
										xmlattribute version				{ value 'md_frameVersion' }
										xmlelement Guaranteed 				{ value 'IF meet_public THEN "true" ELSE "false"' }
										xmlelement Advertised 				{ value 'IF meet_driver THEN "true" ELSE "false"' }
										xmlelement MaximumWaitTime 			{ value '"PT" + Format(meet_max_time, "ssss") + "S"' }
										xmlelement FromPointRef 			{ value 'Placeref(meet_place_start).plc_identifier' }
										xmlelement ToPointRef 				{ value 'Placeref(meet_place_end).plc_identifier' }
										xmlelement FromJourneyRef 			{ value 'AtIndex(Get(trip).trp_int_number,1) '}	
										xmlelement ToJourneyRef 			{ value 'AtIndex(Get(trip).trp_int_number,2)' }
										} # xmlelement ServiceJourneyInterchange
									} # foreach trip_meet
								} # xmlelement journeyInterchanges
							} # xmlelement TimetableFrame	
						} # xmlelement frames
					} # xmlelement CompositeFrame 
				} # xmlelement dataObjects
			} # xmlelement PublicationDelivery
		} # foreach trip
	} # file line	
   
file blocks
   {
   name '"blocks.xml"'
   schema 'none'   
   xmlelement VehicleScheduleFrame
      {
      xmlattribute id 			{ value 'md_authority + ":VehicleScheduleFrame:1"' }
      xmlattribute version    { value 'md_frameVersion' }
      condition 'p_InclVehicleScheduleFrame'
      xmlelement blocks
         {
         foreach block
            {
            condition 'with a trip {md_trp_valid}'
            sort_by blkSort
               {
               criteria vta_number
               criteria blk_time_start
               } # sort_by blkSort
            xmlelement Block
               {	
               xmlattribute id					{ value 'md_authority + ":Block:" + vsc_booking + "-" + vsc_int_id + "-" + AtIndex(Trim(vta_number), 1) + "-" + blk_time_start' }
               xmlelement Description	  		{ value 'Trim(blk_number)' }
               xmlelement VehicleTypeRef
                  {
                  xmlattribute ref 			   { value 'md_authority + ":VehicleType:" + vehg_identifier' }
                  xmlattribute version 		{ value 'md_frameVersion' }
                  } # xmlelement VehicleTypeRef
               xmlelement startPointRef
                  {
                  xmlattribute ref 			   { value 'blk_place_start' }
                  xmlattribute version 		{ value 'md_frameVersion' }
                  } # xmlelement startPointRef
               xmlelement endPointRef
                  {
                  xmlattribute ref 			   { value 'blk_place_end' }
                  xmlattribute version 		{ value 'md_frameVersion' }
                  } # xmlelement endPointRef
               xmlelement coursesOfJourneys
                  {
                  xmlelement CourseOfJourneys
                     {
                     xmlattribute id 				   { value 'md_authority + ":CourseOfJourneys:" + vsc_booking + "-" + vsc_int_id + "-" + AtIndex(Trim(vta_number),1) + "-" + blk_time_start' }
                     xmlattribute version 			{ value 'md_frameVersion' }
                     xmlelement StartTimeInBlock 	{ value 'blk_time_start' }																
                     xmlelement BlockRef
                        {
                        xmlattribute ref 		   { value 'md_authority + ":Block:" + vsc_booking + "-" + vsc_int_id + "-" + AtIndex(Trim(vta_number),1) + "-"+ blk_time_start' }
                        xmlattribute version 	{ value 'md_frameVersion' }
                        } # xmlelement BlockRef 
                     xmlelement journeys
                        {
                        foreach trip
                           {	
                           condition 'md_trp_valid'
									sort_by Trip
										{
										criteria trp_time_start
                              criteria trp_time_end
										} # sort_by TripStopSort	                           
                           xmlelement VehicleJourneyRef
                              {
                              xmlattribute ref		{ value 'md_authority + ":ServiceJourney:" + Trim(trp_route) + "-" + vsc_int_id + "-" + Trim(trp_number)'}
                              } # xmlelement VehicleJourneyRef
                           } # foreach trip
                        } # xmlelement journeys
                     } # xmlelement CourseOfJourneys
                  } # xmlelement coursesOfJourneys
               } # xmlelement Block
            } # foreach block
         } # xmlelement blocks
      } # xmlelement VehicleScheduleFrame						
	} # file line