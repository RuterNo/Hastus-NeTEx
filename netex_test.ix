

basetype time	  		{ mask "0hh'mm:ss" }		
		
definitions MainDefinitions 
	{
	code
	DEFINE md_frameVersion { v_source + "_" + Format(datetoday(),"!yyyymmdd") }
	DEFINE md_operatorId { "RUT" }
	DEFINE md_operatorName { "RUT" }
	DEFINE md_authority { "RUT" }
	DEFINE md_trp_valid CLASS trip
		{
		trp_duration > 0h00 
		}	
	DEFINE md_rte_service_mode CLASS route
		{
		IF rte_service_mode = 0 /* BUS */ THEN
			"BUS"
		ELSE IF rte_service_mode = 1 /* TRAMWAY */ THEN
			"TRAM"
		ELSE IF rte_service_mode = 2 /* METRO */ THEN
			"TRAM" 
		ELSE
			"TRAIN"
		}
	 DEFINE md_itn_pnt_coord
		{
		ConcatMultLine(md_itn_coord, 5)
		}
	DEFINE md_itn_coord
		{
		AppendMult("<itn_coord>", Concat(itn_coord), "</itn_coord>")
		}

	end
	} # definitions MainDefinitions 

var v_source							{ type 'string'  assign 'IF p_CalendarId<>NULL THEN p_CalendarId ELSE IF p_SchedUnit<>NULL THEN p_SchedUnit '}
var v_tpat_link_index 					{ type 'integer' assign '0' }
var v_valid_days						{ type 'string' } 

file netex 
	{
	xmlelement PublicationDelivery 
		{
		xmlattribute xmlns { value '"http://www.netex.org.uk/netex"' }
		xmlattribute xmlns:gml { value '"http://www.opengis.net/gml/3.2"' }
		xmlattribute version { value '"1.0"' }
		
		xmlelement PublicationTimestamp { value 'DateToday()' }
		xmlelement ParticipantRef { value '"NDOV"' }
		
		xmlelement dataObjects
			{
			xmlelement CompositeFrame 
				{				
				xmlattribute id 					{ value 'md_operatorId + ":CompositeFrame:1"' }
				xmlattribute version 				{ value 'md_frameVersion' }
				xmlattribute modification 			{ value '"new"' }
				
				xmlelement FrameDefaults 
					{
					xmlelement DefaultDataSourceRef 
						{
						xmlattribute ref 			{ value '"BISON:DataSource:" + md_operatorId' }
						} # xmlelement DefaultDataSourceRef 
					} # xmlelement FrameDefaults
				xmlelement versions
					{
					xmlelement Version 
						{
						xmlattribute id 				{ value 'md_operatorId + ":Version:" + md_frameVersion' }
						xmlattribute version 			{ value 'md_frameVersion' }
						xmlelement StartDate 			{ value 'p_DateStart' }
						xmlelement EndDate 				{ value 'p_DateEnd' }						
						} # xmlelement Version 
					} # xmlelement versions
				xmlelement frames
					{
					xmlelement ResourceFrame 
						{
						xmlattribute id 				{ value 'md_operatorId + ":ResourceFrame:1"' }
						xmlattribute version 			{ value 'md_frameVersion' }
						xmlelement dataSources
							{
							xmlelement DataSource 
								{
								xmlelement Name 		{ value '"Ruter As"' }
								} # xmlelement DataSource 
							} # xmlelement dataSources
						 
						xmlelement organisations
							{
							foreach Contractor
								{
								unique_on 'cntr_identifier'
								xmlelement Operator
									{
									xmlattribute id 					{ value 'md_authority + ":Operator:" + cntr_identifier' }
									xmlattribute version 				{ value '"any"' }	
									xmlelement Name 					{ value 'cntr_description' }
									} # xmlelement Operator
								}
							
							xmlelement Authority
								{
								xmlattribute id 				{ value '"RUT:Authority:Ruter"' }
								xmlattribute version 			{ value '"any"' }
								xmlelement Name 				{ value '"Ruter"' }
								} # xmlelement Authority
								
							} # xmlelement organisations					
						} # xmlelement ResourceFrame				
					
					xmlelement SiteFrame
						{
						xmlelement stopPlaces
							{
							foreach trip_point
								{
								from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_point)'
								condition ' stp_is_public '
								unique_on 'stp_id_regtopp_calc'
								xmlelement StopPlace
									{
									xmlattribute id 				{ value 'md_authority + ":sp:" + stp_id_regtopp_calc' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement Name	{ value 'stp_alternate_name' }
									xmlelement TransportMode { value '"funicular"' }
									xmlelement StopPlaceType { value ' stp_node_type ' }
									} #xmlelement StopPlace
								} # foreach trip_point
							} # xmlelement stopPlaces
						
						} # xmlelement SiteFrame
					
					xmlelement ServiceFrame
						{
						xmlattribute id 			{ value 'md_authority + ":ServiceFrame:1"' }
						xmlattribute version 		{ value 'md_frameVersion' }
						xmlelement routePoints
							{
							foreach trip_pattern_point
								{ 	
								from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_pattern).get(trip_pattern_point)'
								condition 'tpatpt_itinerary <> NULL'
								unique_on 'stp_identifier'
								xmlelement RoutePoint
									{	
									xmlattribute id 				{ value 'md_authority + ":RoutePoint:" + stp_identifier' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement Location
										{
										xmlelement gml:pos 
											{
											xmlattribute srsName 			{ value '"EPSG:4326"' }
 											value 'Object(stop,stp_identifier).loca_longitude + " " + Object(stop,stp_identifier).loca_latitude'
											} # xmlelement gml:pos 
										} # xmlelement Location
									} # xmlelement RoutePoint
								} # foreach trip_pattern_point
							} # xmlelement routePoints
						
						xmlelement routes
							{
							foreach trip_pattern
								{
								from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_pattern)'
								sort_by TripSort
									{
									criteria tpat_route
									criteria tpat_external_id
									} # sort_by TripSort
								unique_on 'tpat_route, tpat_external_id'
								condition 'md_trp_valid AND trp_is_in_service'								
								var v_tpat_link_index 		{assign '0'}	
								xmlelement Route
									{
									xmlattribute id 				{ value 'md_authority + ":Route:" + tpat_route + ":" + tpat_external_id' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement Name 				{ value 'Object(route,trp_route).rte_description' }
									xmlelement LineRef
										{
										xmlattribute version 		{ value 'md_frameVersion' }
										xmlattribute ref 			{ value 'md_authority + ":Line:" + tpat_route' }
										} # xmlelement LineRef
									xmlelement DirectionRef			{ value 'tpat_direction' }
									xmlelement pointsInSequence
										{
										foreach trip_pattern_point 
											{				
											var v_tpat_link_index {assign ' v_tpat_link_index + 1 '}										
											xmlelement PointOnRoute
												{
												xmlattribute id 			{ value 'md_authority + ":PointOnRoute:" + trim(tpat_route) + "-" + v_tpat_link_index' }
												xmlattribute version 		{ value 'md_frameVersion' }
												xmlelement RoutePointRef
													{
													xmlattribute ref { value 'md_authority + ":RoutePoint:" + stp_identifier ' }
													} # xmlelement RoutePointRef							
												} # xmlelement PointOnRoute
											} # foreach trip_pattern_point
										} # xmlelement pointsInSequence
									} # xmlelement Route
								} # foreach trip_pattern
							} # xmlelement routes
						xmlelement lines
							{
							foreach trip
								{
								from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1).Get(trip, md_trp_valid)'
								condition 'trp_is_public'
								unique_on 'trp_route'
								sort_by 'trp_route'
								xmlelement Line
									{
									xmlattribute id 			{ value 'md_authority + ":Line:" + trp_route' }
									xmlattribute version 		{ value 'md_frameVersion' }
									
									xmlelement Name 				{ value 'Object(route,trp_route).rte_description' }
									xmlelement TransportMode 		{ value 'md_rte_service_mode' }
									xmlelement PublicCode 			{ value 'Object(route,trp_route).rte_pub_id' }
									xmlelement AuthorityRef
										{
										xmlattribute ref 			{ value '"BISON:Authority:"+md_authority' }
										} # xmlelement AuthorityRef
									xmlelement Monitored 			{ value 'IF trp_is_in_service THEN "true" ELSE "false"' }
									xmlelement AccessibilityAssessment
										{
										xmlattribute id 			{ value 'md_authority + ":AccessibilityAssessment:" + trp_route' }
										xmlattribute version 		{ value 'md_frameVersion' }
										} # xmlelement AccessibilityAssessment
									} # xmlelement Line														
								} # foreach trip
							} # xmlelement lines
						xmlelement destinationDisplays
							{
							foreach veh_disp_code
								{
								from ' GetAll(vehicle_schedule, vsc_is_current).Get(veh_disp_code) '
								unique_on ' vdc_id '
								sort_by 'vdc_id'
								xmlelement DestinationDisplay
									{
									xmlattribute id 				{ value 'md_authority + ":DestinationDisplay:" + vdc_id' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement Name 				{ value 'vdc_message1' }
									} # xmlelement DestinationDisplay					
								} # foreach veh_disp_code
							} # xmlelement destinationDisplays
						xmlelement scheduledStopPoints
							{
							foreach stop
								{
								from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
								unique_on 'stp_identifier'
								condition 'stp_is_public'
								sort_by 'stp_identifier'
								xmlelement ScheduledStopPoint
									{
									xmlattribute id 				{ value 'md_authority + ":StopPoint:" + stp_identifier' }
									xmlattribute version 			{ value 'md_frameVersion' }
									xmlelement Name 				{ value 'stp_alternate_name' } # User def attribute (Regtopp)
									# xmlelement ForAlighting 		{ value 'IF stp_allow_debarking THEN "true" ELSE "false"' }
									# xmlelement ForBoarding 			{ value 'IF stp_allow_boarding THEN "true" ELSE "false"' }
									xmlelement projections
										{										
										xmlelement PointProjectionRef
											{										
											xmlattribute nameOfRefClass 		{ value '"RoutePoint"' }
											xmlattribute ref 					{ value 'md_authority + ":RoutePoint:" + stp_identifier' }
											} # xmlelement PointProjectionRef
										} # xmlelement projections
									} # xmlelement ScheduledStopPoint
								} # foreach stop
							} # xmlelement scheduledStopPoints
						
						xmlelement stopAssignments
							{
							
							} # xmlelement stopAssignments
						
						xmlelement timingPoints
							{
							foreach stop
								{
								from 'GetAll(vehicle_schedule, vsc_is_current).stps_in_vsc'
								unique_on 'stp_identifier'
								condition 'NOT stp_is_public'
								sort_by 'stp_identifier'
								
								xmlelement TimingPoint
									{
									xmlattribute id 			{ value 'md_authority + ":TimingPoint:" + stp_identifier' }
									xmlattribute version 		{ value 'md_frameVersion' }
									xmlelement Name 				{ value 'stp_description' }
									xmlelement ForAlighting 		{ value 'IF stp_allow_debarking THEN "true" ELSE "false"' }
									xmlelement ForBoarding 			{ value 'IF stp_allow_boarding THEN "true" ELSE "false"' }
									xmlelement projections
										{										
										xmlelement PointProjectionRef
											{										
											xmlattribute nameOfRefClass 	{ value '"RoutePoint"' }
											xmlattribute ref 				{ value 'md_authority + ":RoutePoint:" + stp_identifier' }
											} # xmlelement PointProjectionRef
										} # xmlelement projections
									} # xmlelement TimingPoint
								} # foreach stop
							} # xmlelement timingPoints					
						xmlelement timingLinks
							{
							foreach trip_pattern_point
								{
								from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_pattern).get(trip_pattern_point)'
								condition 'Prev().stp_identifier <> "" AND stp_identifier <> "" AND Prev().stp_identifier <> stp_identifier'
								unique_on 'Prev().stp_identifier, stp_identifier '
								sort_by TripPatternStopSort
									{
									criteria Prev().stp_identifier
									criteria stp_identifier
									criteria tpatpt_distance
									} # sort_by TripPatternStopSort
								xmlelement TimingLink
									{
									xmlattribute id 						{ value 'md_authority + ":TimingLink:" + Prev().stp_identifier + "-" + stp_identifier' }
									xmlattribute version 					{ value 'md_frameVersion' }
									xmlattribute responsibilitySetRef 		{ value '"BISON:ResponsibilitySet:"+md_authority' }
									xmlelement Distance 					{ value 'Trim(Format(tpatpt_distance,"zzzzz.n"))' }
									xmlelement FromPointRef
										{ 
										xmlattribute ref 		{ value 'md_authority + ":StopPoint:" + Prev().stp_identifier' }
										} # xmlelement FromPointRef
									xmlelement ToPointRef
										{
										xmlattribute ref 		{ value 'md_authority + ":StopPoint:" + stp_identifier' }
										} # xmlelement ToPointRef
									} # xmlelement TimingLink
								} # foreach trip_pattern_point
							} # xmlelement timingLinks
						xmlelement journeyPatterns
							{
							foreach trip_pattern
								{
								from 'GetAll(vehicle_schedule).get(trip, md_trp_valid).get(trip_pattern)'
								sort_by TripSort
									{
									criteria tpat_route
									criteria tpat_external_id
									} # sort_by TripSort
								unique_on 'tpat_route, tpat_external_id'
								condition 'md_trp_valid AND trp_is_in_service'
								var v_tpat_link_index {assign '0'}						
								xmlelement ServiceJourneyPattern
									{
									xmlattribute id 			{ value 'md_authority + ":JourneyPattern:" + tpat_external_id' }
									xmlattribute version 		{ value 'md_frameVersion' }
									xmlelement pointsInSequence
										{
										foreach trip_pattern_point
											{												
											condition 'Prev().stp_identifier <> ""'
											var v_tpat_link_index 		{assign ' v_tpat_link_index + 1 '}
											xmlelement StopPointInJourneyPattern
												{
												xmlattribute id 			{ value 'md_authority + ":StopPointInJourneyPattern:" + tpat_external_id + "-" + v_tpat_link_index' }												
												xmlattribute version 		{ value 'md_frameVersion' }
												xmlattribute order 			{ value 'v_tpat_link_index' }	
												xmlelement ScheduledStopPointRef
													{
													xmlattribute ref 		{ value 'md_authority + ":StopPoint:" + Prev().stp_identifier' }
													} # xmlelement ScheduledStopPointRef
												xmlelement OnwardTimingLinkRef
													{
													xmlattribute ref 		{ value 'md_authority + ":TimingLink:" + Prev().stp_identifier + "-" + stp_identifier' }
													} # xmlelement OnwardTimingLinkRef
												xmlelement DestinationDisplayRef
													{
													xmlattribute ref		{ value 'md_authority + ":DestinationDisplay:" + Object(veh_disp_code, tpatpt_veh_display_code_user).vdc_id' }
													} # xmlelement DestinationDisplayRef									
												} # xmlelement StopPointInJourneyPattern								
											} # foreach trip_pattern_point						
										} # xmlelement pointsInSequence
									} # xmlelement ServiceJourneyPattern
								} # foreach trip_pattern
							} # xmlelement journeyPatterns
						xmlelement notices
							{
							xmlelement journeyInterchange
								{
								foreach trip_meet
									{
									from 'GetAll(vehicle_schedule, vsc_is_current).Get(meet_builder).Get(trip_meet)'
									xmlelement ServiceJourneyInterchange
										{
										xmlattribute ref 					{ value 'md_authority + ":ScheduledStopPoint:" + stp_identifier' }
										xmlattribute version				{ value 'md_frameVersion' }
										xmlelement Guaranteed 				{ value 'IF meet_public THEN "true" ELSE "false"' }
										xmlelement Advertised 				{ value 'IF meet_driver THEN "true" ELSE "false"' }
										xmlelement MaximumWaitTime 			{ value '"PT" + Format(meet_max_time, "ssss") + "S"' }
										xmlelement FromPointRef 			{ value 'Placeref(meet_place_start).plc_identifier' }
										xmlelement ToPointRef 				{ value 'Placeref(meet_place_end).plc_identifier' }
										xmlelement FromJourneyRef 			{ value 'AtIndex(Get(trip).trp_int_number,1) '}	
										xmlelement ToJourneyRef 			{ value 'AtIndex(Get(trip).trp_int_number,2)' }
										} # xmlelement ServiceJourneyInterchange
									} # xmlelement ServiceJourneyInterchange
								} # xmlelement journeyInterchange
							} # xmlelement notices			
						} # xmlelement ServiceFrame	
					
					xmlelement TimetableFrame
						{
						xmlelement contentValidityConditions
							{
							foreach vehicle_schedule
								{	
								condition 'vsc_is_multiple'
								var v_valid_days 		{ assign '""' } 
								foreach scheduling_unit_date
									{	
									from 'GetSchedUnitDates(vehicle_schedule, p_SchedSet, p_SchedUnit, p_ProdPhase, p_DateStart, p_DateEnd, p_CalType, p_CalendarId)'
									var v_valid_days 	{ assign 'IF Count(GetSchedUnitDates(getCurrent(vehicle_schedule), p_SchedSet, p_SchedUnit, p_ProdPhase, scud_date, scud_date, p_CalType, p_CalendarId))=1 THEN v_valid_days + "1" ELSe v_valid_days + "0" '} 
									} # foreach scheduling_unit_date			
								xmlelement AvailabilityCondition
									{
									xmlattribute id 			{ value 'md_authority + ":AvailabilityCondition:" + v_valid_days + ":" + vsc_int_id' }
									xmlattribute version 		{ value 'md_frameVersion' }
									xmlelement FromDate 		{ value 'p_DateStart' }
									xmlelement ToDate 			{ value 'p_DateEnd' }
									} # xmlelement AvailabilityCondition
								} # foreach vehicle_schedule
							} # xmlelement contentValidityConditions
						xmlelement OperatorView
							{
							xmlattribute ref 		{ value '"BISON:Operator:" + md_authority' }							
							} # xmlelement OperatorView
						xmlelement vehicleJourneys
							{
							foreach trip
								{
								from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1).Get(trip, md_trp_valid)'
								condition 'md_trp_valid'
								unique_on 'vsc_int_id,vsc_sched_type,trp_route,trp_number'
								sort_by TripStopSort
									{
									criteria vsc_int_id
									criteria vsc_sched_type
									criteria trp_route
									criteria trp_number
									} # sort_by TripStopSort
								xmlelement ServiceJourney
									{
																
									xmlelement DepartureTime 		{ value 'trp_time_start' }
									xmlelement JourneyPatternRef
										{
										xmlattribute nameOfRefClass 	{ value '"ServiceJourneyPattern"' }
										xmlattribute ref 				{ value 'md_authority + ":JourneyPattern:" + tpat_external_id' }
										} # xmlelement JourneyPatternRef
									
									xmlelement LineRef
										{
										xmlattribute ref 			{ value 'md_authority + ":Line:" + trim(tpat_route)' }
										} # xmlelement LineRef
									xmlelement passingTimes
										{
										foreach trip_stop
											{
											
											sort_by TstpSort { criteria c1 { value ' tstp_position ' } }
											xmlelement TimetabledPassingTime
												{
												xmlelement StopPointInJourneyPatternRef
													{
													xmlattribute version { value '"any"'}
													xmlattribute ref { value 'md_authority + ":StopPointInJourneyPattern:" + tpat_external_id + "-" + v_tpat_link_index' }
													} # xmlelement StopPointInJourneyPatternRef
												xmlelement DepartureTime { value 'tstp_passing_time' }
												} # xmlelement  TimetabledPassingTime
											} # foreach trip_stop
										} # xmlelement passingTimes
										
									xmlelement TimeDemandTypeRef
										{
										xmlattribute version 			{ value 'md_frameVersion' }
										xmlattribute ref 				{ value 'md_authority + ":TimeDemandType:" + trp_run_time_pattern ' }
										} # xmlelement TimeDemandTypeRef
									xmlelement BlockRef
										{
										xmlattribute version { value 'md_frameVersion' }
										xmlattribute ref { value 'md_authority + ":Block:" + trim(trp_block) ' }										
										} # xmlelement BlockRef
									} # xmlelement ServiceJourney
								} # foreach trip
							} # xmlelement vehicleJourneys
						} # xmlelement TimetableFrame
					xmlelement VehicleScheduleFrame
						{
						xmlelement blocks
							{
							foreach vehicle_schedule
								{	
								from 'GetFirstOfAll(vehicle_schedule, vsc_is_current, 1)'
								sort_by vscBooking
									{
									criteria vsc_booking
									criteria vsc_name
									criteria vsc_sched_type
									criteria vsc_scenario
									} # sort_by vscBooking
								unique_on 'vsc_booking,vsc_name,vsc_sched_type,vsc_scenario'
								condition 'with a trip {md_trp_valid}'
								foreach block
									{
									sort_by blkSort
										{
										criteria vta_number
										criteria blk_time_start
										} # sort_by blkSort
									xmlelement Block
										{	
										xmlattribute id					{ value 'md_authority + ":Block:" +vsc_booking+"-"+vsc_int_id+"-"+AtIndex(trim(vta_number),1)+"-"+blk_time_start' }
										xmlelement Description	  		{ value 'trim(blk_number)' }
										xmlelement VehicleTypeRef
											{
											xmlattribute ref 			{ value 'md_authority + ":VehicleType:" + vehg_identifier' }
											xmlattribute version 		{ value 'md_frameVersion' }
											} # xmlelement VehicleTypeRef
										xmlelement startPointRef
											{
											xmlattribute ref 			{ value 'blk_place_start' }
											xmlattribute version 		{ value 'md_frameVersion' }
											} # xmlelement startPointRef
										xmlelement endPointRef
											{
											xmlattribute ref 			{ value 'blk_place_end' }
											xmlattribute version 		{ value 'md_frameVersion' }
											} # xmlelement endPointRef
										xmlelement coursesOfJourneys
											{
											xmlelement CourseOfJourneys
												{
												xmlattribute id 				{ value 'md_authority + ":CourseOfJourneys:" + vsc_booking+"-"+vsc_int_id+"-"+AtIndex(trim(vta_number),1)+"-"+blk_time_start ' }
												xmlattribute version 			{ value 'md_frameVersion' }
												xmlelement StartTimeInBlock 	{ value 'blk_time_start' }																
												xmlelement BlockRef
													{
													xmlattribute ref 		{ value 'md_authority + ":Block:" +vsc_booking+"-"+vsc_int_id+"-"+AtIndex(trim(vta_number),1)+"-"+blk_time_start' }
													xmlattribute version 	{ value 'md_frameVersion' }
													} # xmlelement BlockRef 
												xmlelement journeys
													{
													foreach trip
														{	
														condition 'md_trp_valid'
														xmlelement VehicleJourneyRef
															{
															xmlattribute ref		{ value 'md_authority + ":ServiceJourney:" +trp_int_number'}
															} # xmlelement VehicleJourneyRef
														} # foreach trip
													} # xmlelement journeys
												} # xmlelement CourseOfJourneys
											} # xmlelement coursesOfJourneys
										} # xmlelement Block
									} # foreach block
								} # foreach vehicle_schedule
							} # xmlelement blocks
						} # xmlelement VehicleScheduleFrame
						
					} # xmlelement frames
				} # xmlelement CompositeFrame 
			} # xmlelement dataObjects
		} # xmlelement PublicationDelivery
	} # file netex

